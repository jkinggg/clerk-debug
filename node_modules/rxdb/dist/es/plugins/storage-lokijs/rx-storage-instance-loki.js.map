{"version":3,"file":"rx-storage-instance-loki.js","names":["Subject","flatClone","now","ensureNotFalsy","isMaybeReadonlyArray","getFromMapOrThrow","getSortDocumentsByLastWriteTimeComparator","RX_META_LWT_MINIMUM","lastOfArray","newRxError","closeLokiCollections","getLokiDatabase","OPEN_LOKIJS_STORAGE_INSTANCES","LOKIJS_COLLECTION_DEFAULT_OPTIONS","stripLokiKey","getLokiSortComparator","getLokiLeaderElector","requestRemoteInstance","mustUseLocalState","handleRemoteRequest","RX_STORAGE_NAME_LOKIJS","transformRegexToRegExp","getPrimaryFieldOfPrimaryKey","categorizeBulkWriteRows","addRxStorageMultiInstanceSupport","removeBroadcastChannelReference","instanceId","RxStorageInstanceLoki","databaseInstanceToken","storage","databaseName","collectionName","schema","internals","options","databaseSettings","changes$","closed","primaryPath","primaryKey","add","leaderElector","copiedSelf","bulkWrite","bind","changeStream","cleanup","close","query","count","findDocumentsById","conflictResultionTasks","getAttachmentData","getChangedDocumentsSince","remove","resolveConflictResultionTask","awaitLeadership","then","broadcastChannel","addEventListener","msg","_proto","prototype","documentWrites","context","length","args","localState","ret","success","error","docsInDb","Map","docsInDbWithLokiKey","forEach","writeRow","id","document","documentInDb","collection","by","set","categorized","errors","bulkInsertDocs","docId","insert","bulkUpdateDocs","documentInDbWithLokiKey","writeDoc","Object","assign","$loki","update","databaseState","saveQueue","addWrite","eventBulk","events","lastState","newestRow","checkpoint","lwt","_meta","next","ids","deleted","_deleted","preparedQuery","selector","chain","find","sort","skip","offset","limit","foundDocuments","data","map","lokiDoc","documents","result","mode","_documentId","_attachmentId","Error","sinceLwt","$gte","changedDocs","first","shift","slice","lastDoc","docData","asObservable","minimumDeletedTime","deleteAmountPerRun","maxDeletionTime","$lt","Promise","reject","complete","delete","dbState","run","database","removeCollection","name","_taskSolution","createLokiLocalState","params","indices","indexes","idx","push","lokiCollectionName","version","collectionOptions","unique","addCollection","collections","createLokiStorageInstance","broadcastChannelRefObject","multiInstance","instance","undefined","closeBefore","removeBefore"],"sources":["../../../../src/plugins/storage-lokijs/rx-storage-instance-loki.ts"],"sourcesContent":["import {\n    Subject,\n    Observable\n} from 'rxjs';\nimport {\n    flatClone,\n    now,\n    ensureNotFalsy,\n    isMaybeReadonlyArray,\n    getFromMapOrThrow,\n    getSortDocumentsByLastWriteTimeComparator,\n    RX_META_LWT_MINIMUM,\n    lastOfArray\n} from '../utils';\nimport { newRxError } from '../../rx-error';\nimport type {\n    RxStorageInstance,\n    LokiSettings,\n    RxStorageChangeEvent,\n    RxDocumentData,\n    BulkWriteRow,\n    RxStorageBulkWriteResponse,\n    RxStorageQueryResult,\n    RxJsonSchema,\n    MangoQuery,\n    LokiStorageInternals,\n    RxStorageInstanceCreationParams,\n    LokiDatabaseSettings,\n    LokiLocalDatabaseState,\n    EventBulk,\n    StringKeys,\n    RxDocumentDataById,\n    DeepReadonly,\n    RxConflictResultionTask,\n    RxConflictResultionTaskSolution,\n    RxStorageDefaultCheckpoint,\n    RxStorageCountResult\n} from '../../types';\nimport {\n    closeLokiCollections,\n    getLokiDatabase,\n    OPEN_LOKIJS_STORAGE_INSTANCES,\n    LOKIJS_COLLECTION_DEFAULT_OPTIONS,\n    stripLokiKey,\n    getLokiSortComparator,\n    getLokiLeaderElector,\n    requestRemoteInstance,\n    mustUseLocalState,\n    handleRemoteRequest,\n    RX_STORAGE_NAME_LOKIJS,\n    transformRegexToRegExp\n} from './lokijs-helper';\nimport type {\n    Collection\n} from 'lokijs';\nimport type { RxStorageLoki } from './rx-storage-lokijs';\nimport { getPrimaryFieldOfPrimaryKey } from '../../rx-schema-helper';\nimport { categorizeBulkWriteRows } from '../../rx-storage-helper';\nimport { addRxStorageMultiInstanceSupport, removeBroadcastChannelReference } from '../../rx-storage-multiinstance';\n\nlet instanceId = now();\n\nexport class RxStorageInstanceLoki<RxDocType> implements RxStorageInstance<\n    RxDocType,\n    LokiStorageInternals,\n    LokiSettings,\n    RxStorageDefaultCheckpoint\n> {\n\n    public readonly primaryPath: StringKeys<RxDocumentData<RxDocType>>;\n    private changes$: Subject<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, RxStorageDefaultCheckpoint>> = new Subject();\n    public readonly instanceId = instanceId++;\n\n    public closed = false;\n\n    constructor(\n        public readonly databaseInstanceToken: string,\n        public readonly storage: RxStorageLoki,\n        public readonly databaseName: string,\n        public readonly collectionName: string,\n        public readonly schema: Readonly<RxJsonSchema<RxDocumentData<RxDocType>>>,\n        public readonly internals: LokiStorageInternals,\n        public readonly options: Readonly<LokiSettings>,\n        public readonly databaseSettings: LokiDatabaseSettings\n    ) {\n        this.primaryPath = getPrimaryFieldOfPrimaryKey(this.schema.primaryKey);\n        OPEN_LOKIJS_STORAGE_INSTANCES.add(this);\n        if (this.internals.leaderElector) {\n\n\n            /**\n             * To run handleRemoteRequest(),\n             * the instance will call its own methods.\n             * But these methods could have already been swapped out by a RxStorageWrapper\n             * so we must store the original methods here and use them instead.\n             */\n            const copiedSelf: RxStorageInstance<RxDocType, any, any> = {\n                bulkWrite: this.bulkWrite.bind(this),\n                changeStream: this.changeStream.bind(this),\n                cleanup: this.cleanup.bind(this),\n                close: this.close.bind(this),\n                query: this.query.bind(this),\n                count: this.count.bind(this),\n                findDocumentsById: this.findDocumentsById.bind(this),\n                collectionName: this.collectionName,\n                databaseName: this.databaseName,\n                conflictResultionTasks: this.conflictResultionTasks.bind(this),\n                getAttachmentData: this.getAttachmentData.bind(this),\n                getChangedDocumentsSince: this.getChangedDocumentsSince.bind(this),\n                internals: this.internals,\n                options: this.options,\n                remove: this.remove.bind(this),\n                resolveConflictResultionTask: this.resolveConflictResultionTask.bind(this),\n                schema: this.schema\n            };\n\n            this.internals.leaderElector.awaitLeadership().then(() => {\n                // this instance is leader now, so it has to reply to queries from other instances\n                ensureNotFalsy(this.internals.leaderElector).broadcastChannel\n                    .addEventListener('message', (msg) => handleRemoteRequest(copiedSelf as any, msg));\n            });\n        }\n    }\n\n    async bulkWrite(\n        documentWrites: BulkWriteRow<RxDocType>[],\n        context: string\n    ): Promise<RxStorageBulkWriteResponse<RxDocType>> {\n        if (documentWrites.length === 0) {\n            throw newRxError('P2', {\n                args: {\n                    documentWrites\n                }\n            });\n        }\n        const localState = await mustUseLocalState(this);\n        if (!localState) {\n            return requestRemoteInstance(this, 'bulkWrite', [documentWrites]);\n        }\n\n        const ret: RxStorageBulkWriteResponse<RxDocType> = {\n            success: {},\n            error: {}\n        };\n\n        const docsInDb: Map<RxDocumentData<RxDocType>[StringKeys<RxDocType>], RxDocumentData<RxDocType>> = new Map();\n        const docsInDbWithLokiKey: Map<\n            RxDocumentData<RxDocType>[StringKeys<RxDocType>],\n            RxDocumentData<RxDocType> & { $loki: number; }\n        > = new Map();\n        documentWrites.forEach(writeRow => {\n            const id = writeRow.document[this.primaryPath];\n            const documentInDb = localState.collection.by(this.primaryPath, id);\n            if (documentInDb) {\n                docsInDbWithLokiKey.set(id as any, documentInDb);\n                docsInDb.set(id as any, stripLokiKey(documentInDb));\n            }\n        });\n\n        const categorized = categorizeBulkWriteRows<RxDocType>(\n            this,\n            this.primaryPath as any,\n            docsInDb,\n            documentWrites,\n            context\n        );\n        ret.error = categorized.errors;\n\n        categorized.bulkInsertDocs.forEach(writeRow => {\n            const docId = writeRow.document[this.primaryPath];\n            localState.collection.insert(flatClone(writeRow.document));\n            ret.success[docId as any] = writeRow.document;\n        });\n        categorized.bulkUpdateDocs.forEach(writeRow => {\n            const docId = writeRow.document[this.primaryPath];\n            const documentInDbWithLokiKey = getFromMapOrThrow(docsInDbWithLokiKey, docId as any);\n            const writeDoc: any = Object.assign(\n                {},\n                writeRow.document,\n                {\n                    $loki: documentInDbWithLokiKey.$loki\n                }\n            );\n            localState.collection.update(writeDoc);\n            ret.success[docId as any] = writeRow.document;\n        });\n        localState.databaseState.saveQueue.addWrite();\n\n        if (categorized.eventBulk.events.length > 0) {\n            const lastState = ensureNotFalsy(categorized.newestRow).document;\n            categorized.eventBulk.checkpoint = {\n                id: lastState[this.primaryPath],\n                lwt: lastState._meta.lwt\n            };\n            this.changes$.next(categorized.eventBulk);\n        }\n\n        return ret;\n    }\n    async findDocumentsById(ids: string[], deleted: boolean): Promise<RxDocumentDataById<RxDocType>> {\n        const localState = await mustUseLocalState(this);\n        if (!localState) {\n            return requestRemoteInstance(this, 'findDocumentsById', [ids, deleted]);\n        }\n\n        const ret: RxDocumentDataById<RxDocType> = {};\n        ids.forEach(id => {\n            const documentInDb = localState.collection.by(this.primaryPath, id);\n            if (\n                documentInDb &&\n                (!documentInDb._deleted || deleted)\n            ) {\n                ret[id] = stripLokiKey(documentInDb);\n            }\n        });\n        return ret;\n    }\n    async query(preparedQuery: MangoQuery<RxDocType>): Promise<RxStorageQueryResult<RxDocType>> {\n        const localState = await mustUseLocalState(this);\n        if (!localState) {\n            return requestRemoteInstance(this, 'query', [preparedQuery]);\n        }\n\n        if (preparedQuery.selector) {\n            preparedQuery = flatClone(preparedQuery);\n            preparedQuery.selector = transformRegexToRegExp(preparedQuery.selector);\n        }\n\n        let query = localState.collection\n            .chain()\n            .find(preparedQuery.selector);\n\n        if (preparedQuery.sort) {\n            query = query.sort(getLokiSortComparator(this.schema, preparedQuery));\n        }\n\n        /**\n         * Offset must be used before limit in LokiJS\n         * @link https://github.com/techfort/LokiJS/issues/570\n         */\n        if (preparedQuery.skip) {\n            query = query.offset(preparedQuery.skip);\n        }\n\n        if (preparedQuery.limit) {\n            query = query.limit(preparedQuery.limit);\n        }\n\n        const foundDocuments = query.data().map(lokiDoc => stripLokiKey(lokiDoc));\n        return {\n            documents: foundDocuments\n        };\n    }\n    async count(\n        preparedQuery: MangoQuery<RxDocType>\n    ): Promise<RxStorageCountResult> {\n        const result = await this.query(preparedQuery);\n        return {\n            count: result.documents.length,\n            mode: 'fast'\n        };\n    }\n    getAttachmentData(_documentId: string, _attachmentId: string): Promise<string> {\n        throw new Error('Attachments are not implemented in the lokijs RxStorage. Make a pull request.');\n    }\n\n\n    async getChangedDocumentsSince(\n        limit: number,\n        checkpoint?: RxStorageDefaultCheckpoint | null\n    ): Promise<{\n        documents: RxDocumentData<RxDocType>[];\n        checkpoint: RxStorageDefaultCheckpoint;\n    }> {\n        const localState = await mustUseLocalState(this);\n        if (!localState) {\n            return requestRemoteInstance(this, 'getChangedDocumentsSince', [limit, checkpoint]);\n        }\n\n        const sinceLwt = checkpoint ? checkpoint.lwt : RX_META_LWT_MINIMUM;\n        const query = localState.collection\n            .chain()\n            .find({\n                '_meta.lwt': {\n                    $gte: sinceLwt\n                }\n            })\n            .sort(getSortDocumentsByLastWriteTimeComparator(this.primaryPath as any));\n        let changedDocs = query.data();\n\n        const first = changedDocs[0];\n        if (\n            checkpoint &&\n            first &&\n            first[this.primaryPath] === checkpoint.id &&\n            first._meta.lwt === checkpoint.lwt\n        ) {\n            changedDocs.shift();\n        }\n\n        changedDocs = changedDocs.slice(0, limit);\n        const lastDoc = lastOfArray(changedDocs);\n        return {\n            documents: changedDocs.map(docData => stripLokiKey(docData)),\n            checkpoint: lastDoc ? {\n                id: lastDoc[this.primaryPath],\n                lwt: lastDoc._meta.lwt\n            } : checkpoint ? checkpoint : {\n                id: '',\n                lwt: 0\n            }\n        };\n    }\n\n    changeStream(): Observable<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, RxStorageDefaultCheckpoint>> {\n        return this.changes$.asObservable();\n    }\n\n    async cleanup(minimumDeletedTime: number): Promise<boolean> {\n        const localState = await mustUseLocalState(this);\n        if (!localState) {\n            return requestRemoteInstance(this, 'cleanup', [minimumDeletedTime]);\n        }\n\n        const deleteAmountPerRun = 10;\n        const maxDeletionTime = now() - minimumDeletedTime;\n        const query = localState.collection\n            .chain()\n            .find({\n                _deleted: true,\n                '_meta.lwt': {\n                    $lt: maxDeletionTime\n                }\n            }).limit(deleteAmountPerRun);\n        const foundDocuments = query.data();\n        if (foundDocuments.length > 0) {\n            localState.collection.remove(foundDocuments);\n            localState.databaseState.saveQueue.addWrite();\n        }\n\n        return foundDocuments.length !== deleteAmountPerRun;\n    }\n\n    async close(): Promise<void> {\n        if (this.closed) {\n            return Promise.reject(new Error('already closed'));\n        }\n        this.closed = true;\n        this.changes$.complete();\n        OPEN_LOKIJS_STORAGE_INSTANCES.delete(this);\n\n        if (this.internals.localState) {\n            const localState = await this.internals.localState;\n            const dbState = await getLokiDatabase(\n                this.databaseName,\n                this.databaseSettings\n            );\n            await dbState.saveQueue.run();\n            await closeLokiCollections(\n                this.databaseName,\n                [\n                    localState.collection\n                ]\n            );\n        }\n    }\n    async remove(): Promise<void> {\n        const localState = await mustUseLocalState(this);\n        if (!localState) {\n            return requestRemoteInstance(this, 'remove', []);\n        }\n        localState.databaseState.database.removeCollection(localState.collection.name);\n        await localState.databaseState.saveQueue.run();\n        return this.close();\n    }\n\n    conflictResultionTasks(): Observable<RxConflictResultionTask<RxDocType>> {\n        return new Subject();\n    }\n    async resolveConflictResultionTask(_taskSolution: RxConflictResultionTaskSolution<RxDocType>): Promise<void> { }\n\n}\n\nexport async function createLokiLocalState<RxDocType>(\n    params: RxStorageInstanceCreationParams<RxDocType, LokiSettings>,\n    databaseSettings: LokiDatabaseSettings\n): Promise<LokiLocalDatabaseState> {\n    if (!params.options) {\n        params.options = {};\n    }\n\n    const databaseState = await getLokiDatabase(\n        params.databaseName,\n        databaseSettings\n    );\n\n    /**\n     * Construct loki indexes from RxJsonSchema indexes.\n     * TODO what about compound indexes? Are they possible in lokijs?\n     */\n    const indices: string[] = [];\n    if (params.schema.indexes) {\n        params.schema.indexes.forEach(idx => {\n            if (!isMaybeReadonlyArray(idx)) {\n                indices.push(idx);\n            }\n        });\n    }\n    /**\n     * LokiJS has no concept of custom primary key, they use a number-id that is generated.\n     * To be able to query fast by primary key, we always add an index to the primary.\n     */\n    const primaryKey = getPrimaryFieldOfPrimaryKey(params.schema.primaryKey);\n    indices.push(primaryKey as string);\n\n    const lokiCollectionName = params.collectionName + '-' + params.schema.version;\n    const collectionOptions: Partial<CollectionOptions<RxDocumentData<RxDocType>>> = Object.assign(\n        {},\n        lokiCollectionName,\n        {\n            indices: indices as string[],\n            unique: [primaryKey]\n        } as any,\n        LOKIJS_COLLECTION_DEFAULT_OPTIONS\n    );\n\n    const collection: Collection = databaseState.database.addCollection(\n        lokiCollectionName,\n        collectionOptions as any\n    );\n    databaseState.collections[params.collectionName] = collection;\n    const ret: LokiLocalDatabaseState = {\n        databaseState,\n        collection\n    };\n\n    return ret;\n}\n\n\nexport async function createLokiStorageInstance<RxDocType>(\n    storage: RxStorageLoki,\n    params: RxStorageInstanceCreationParams<RxDocType, LokiSettings>,\n    databaseSettings: LokiDatabaseSettings\n): Promise<RxStorageInstanceLoki<RxDocType>> {\n    const internals: LokiStorageInternals = {};\n\n    const broadcastChannelRefObject: DeepReadonly<any> = {};\n\n\n    if (params.multiInstance) {\n        const leaderElector = getLokiLeaderElector(\n            params.databaseInstanceToken,\n            broadcastChannelRefObject,\n            params.databaseName\n        );\n        internals.leaderElector = leaderElector;\n    } else {\n        // optimisation shortcut, directly create db is non multi instance.\n        internals.localState = createLokiLocalState(params, databaseSettings);\n        await internals.localState;\n    }\n\n    const instance = new RxStorageInstanceLoki(\n        params.databaseInstanceToken,\n        storage,\n        params.databaseName,\n        params.collectionName,\n        params.schema,\n        internals,\n        params.options,\n        databaseSettings\n    );\n\n    addRxStorageMultiInstanceSupport(\n        RX_STORAGE_NAME_LOKIJS,\n        params,\n        instance,\n        internals.leaderElector ? internals.leaderElector.broadcastChannel : undefined\n    );\n\n    if (params.multiInstance) {\n        /**\n         * Clean up the broadcast-channel reference on close()\n         */\n        const closeBefore = instance.close.bind(instance);\n        instance.close = function () {\n            removeBroadcastChannelReference(\n                params.databaseInstanceToken,\n                broadcastChannelRefObject\n            );\n            return closeBefore();\n        };\n        const removeBefore = instance.remove.bind(instance);\n        instance.remove = function () {\n            removeBroadcastChannelReference(\n                params.databaseInstanceToken,\n                broadcastChannelRefObject\n            );\n            return removeBefore();\n        };\n\n        /**\n         * Directly create the localState when/if the db becomes leader.\n         */\n        ensureNotFalsy(internals.leaderElector)\n            .awaitLeadership()\n            .then(() => {\n                if (!instance.closed) {\n                    mustUseLocalState(instance);\n                }\n            });\n    }\n\n\n    return instance;\n}\n"],"mappings":"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"}