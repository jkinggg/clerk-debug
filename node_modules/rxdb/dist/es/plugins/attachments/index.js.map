{"version":3,"file":"index.js","names":["map","blobToBase64String","blobToString","createBlobFromBase64","flatClone","getBlobSize","PROMISE_RESOLVE_VOID","newRxError","ensureSchemaSupportsAttachments","doc","schemaJson","collection","schema","jsonSchema","attachments","link","_assignMethodsToAttachment","attachment","Object","entries","forEach","funName","fun","defineProperty","get","bind","RxAttachment","id","type","length","digest","_proto","prototype","remove","incrementalWriteQueue","addWrite","_data","docWriteData","_attachments","then","getData","plainDataBase64","storageInstance","getAttachmentData","primary","ret","getStringData","data","asString","fromStorageInstanceResult","attachmentData","rxDocument","putAttachment","dataSize","dataString","writeResult","newDocument","_docCache","getCachedRxDocument","attachmentDataOfId","getAttachment","docData","allAttachments","keys","preMigrateDocument","newAttachments","Promise","all","attachmentId","docPrimary","oldCollection","primaryPath","rawAttachmentData","postMigrateDocument","_action","RxDBAttachmentsPlugin","name","rxdb","prototypes","RxDocument","proto","allAttachments$","$","pipe","toJSON","overwritable","hooks","after"],"sources":["../../../../src/plugins/attachments/index.ts"],"sourcesContent":["import {\n    map\n} from 'rxjs/operators';\n\nimport {\n    blobToBase64String,\n    blobToString,\n    createBlobFromBase64,\n    flatClone,\n    getBlobSize,\n    PROMISE_RESOLVE_VOID\n} from '../../plugins/utils';\nimport {\n    newRxError\n} from '../../rx-error';\nimport type {\n    RxDocument,\n    RxPlugin,\n    OldRxCollection,\n    RxDocumentWriteData,\n    RxAttachmentData,\n    RxDocumentData,\n    RxAttachmentCreator,\n    RxAttachmentWriteData\n} from '../../types';\n\nfunction ensureSchemaSupportsAttachments(doc: any) {\n    const schemaJson = doc.collection.schema.jsonSchema;\n    if (!schemaJson.attachments) {\n        throw newRxError('AT1', {\n            link: 'https://pubkey.github.io/rxdb/rx-attachment.html'\n        });\n    }\n}\n\nconst _assignMethodsToAttachment = function (attachment: any) {\n    Object\n        .entries(attachment.doc.collection.attachments)\n        .forEach(([funName, fun]) => {\n            Object.defineProperty(attachment, funName, {\n                get: () => (fun as any).bind(attachment)\n            });\n        });\n};\n\n/**\n * an RxAttachment is basically just the attachment-stub\n * wrapped so that you can access the attachment-data\n */\nexport class RxAttachment {\n    public doc: RxDocument;\n    public id: string;\n    public type: string;\n    public length: number;\n    public digest: string;\n    constructor({\n        doc,\n        id,\n        type,\n        length,\n        digest\n    }: any) {\n        this.doc = doc;\n        this.id = id;\n        this.type = type;\n        this.length = length;\n        this.digest = digest;\n\n        _assignMethodsToAttachment(this);\n    }\n\n    remove(): Promise<void> {\n        return this.doc.collection.incrementalWriteQueue.addWrite(\n            this.doc._data,\n            docWriteData => {\n                delete docWriteData._attachments[this.id];\n                return docWriteData;\n            }\n        ).then(() => { });\n    }\n\n    /**\n     * returns the data for the attachment\n     */\n    async getData(): Promise<Blob> {\n        const plainDataBase64 = await this.doc.collection.storageInstance.getAttachmentData(\n            this.doc.primary,\n            this.id\n        );\n        const ret = await createBlobFromBase64(\n            plainDataBase64,\n            this.type as any\n        );\n        return ret;\n    }\n\n    async getStringData(): Promise<string> {\n        const data = await this.getData();\n        const asString = await blobToString(data);\n        return asString;\n    }\n}\n\nexport function fromStorageInstanceResult<RxDocType>(\n    id: string,\n    attachmentData: RxAttachmentData,\n    rxDocument: RxDocument<RxDocType>\n) {\n    return new RxAttachment({\n        doc: rxDocument,\n        id,\n        type: attachmentData.type,\n        length: attachmentData.length,\n        digest: attachmentData.digest\n    });\n}\n\nexport async function putAttachment<RxDocType>(\n    this: RxDocument<RxDocType>,\n    attachmentData: RxAttachmentCreator\n): Promise<RxAttachment> {\n    ensureSchemaSupportsAttachments(this);\n\n    const dataSize = getBlobSize(attachmentData.data);\n    const dataString = await blobToBase64String(attachmentData.data);\n\n    const id = attachmentData.id;\n    const type = attachmentData.type;\n    const data = dataString;\n\n    return this.collection.incrementalWriteQueue.addWrite(\n        this._data,\n        (docWriteData: RxDocumentWriteData<RxDocType>) => {\n            docWriteData._attachments = flatClone(docWriteData._attachments);\n\n            docWriteData._attachments[id] = {\n                length: dataSize,\n                type,\n                data\n            };\n            return docWriteData;\n        }).then(writeResult => {\n            const newDocument = this.collection._docCache.getCachedRxDocument(writeResult);\n            const attachmentDataOfId = writeResult._attachments[id];\n            const attachment = fromStorageInstanceResult(\n                id,\n                attachmentDataOfId,\n                newDocument\n            );\n            return attachment;\n        });\n}\n\n/**\n * get an attachment of the document by its id\n */\nexport function getAttachment(\n    this: RxDocument,\n    id: string\n): RxAttachment | null {\n    ensureSchemaSupportsAttachments(this);\n    const docData: any = this._data;\n    if (!docData._attachments || !docData._attachments[id])\n        return null;\n\n    const attachmentData = docData._attachments[id];\n    const attachment = fromStorageInstanceResult(\n        id,\n        attachmentData,\n        this\n    );\n    return attachment;\n}\n\n/**\n * returns all attachments of the document\n */\nexport function allAttachments(\n    this: RxDocument\n): RxAttachment[] {\n    ensureSchemaSupportsAttachments(this);\n    const docData: any = this._data;\n\n    // if there are no attachments, the field is missing\n    if (!docData._attachments) {\n        return [];\n    }\n    return Object.keys(docData._attachments)\n        .map(id => {\n            return fromStorageInstanceResult(\n                id,\n                docData._attachments[id],\n                this\n            );\n        });\n}\n\nexport async function preMigrateDocument<RxDocType>(\n    data: {\n        docData: RxDocumentData<RxDocType>;\n        oldCollection: OldRxCollection;\n    }\n): Promise<void> {\n    const attachments = data.docData._attachments;\n    if (attachments) {\n        const newAttachments: { [attachmentId: string]: RxAttachmentWriteData; } = {};\n        await Promise.all(\n            Object.keys(attachments).map(async (attachmentId) => {\n                const attachment: RxAttachmentData = attachments[attachmentId];\n                const docPrimary: string = (data.docData as any)[data.oldCollection.schema.primaryPath];\n                const rawAttachmentData = await data.oldCollection.storageInstance.getAttachmentData(docPrimary, attachmentId);\n                newAttachments[attachmentId] = {\n                    length: attachment.length,\n                    type: attachment.type,\n                    data: rawAttachmentData\n                };\n            })\n        );\n\n        /**\n         * Hooks mutate the input\n         * instead of returning stuff\n         */\n        (data.docData as RxDocumentWriteData<RxDocType>)._attachments = newAttachments;\n    }\n}\n\nexport function postMigrateDocument(_action: any): Promise<void> {\n    /**\n     * No longer needed because\n     * we store the attachments data buffers directly in the document.\n     */\n    return PROMISE_RESOLVE_VOID;\n}\n\nexport const RxDBAttachmentsPlugin: RxPlugin = {\n    name: 'attachments',\n    rxdb: true,\n    prototypes: {\n        RxDocument: (proto: any) => {\n            proto.putAttachment = putAttachment;\n            proto.getAttachment = getAttachment;\n            proto.allAttachments = allAttachments;\n            Object.defineProperty(proto, 'allAttachments$', {\n                get: function allAttachments$(this: RxDocument) {\n                    return this.$\n                        .pipe(\n                            map(rxDocument => Object.entries(\n                                rxDocument.toJSON(true)._attachments\n                            )),\n                            map(entries => {\n                                return (entries as any)\n                                    .map(([id, attachmentData]: any) => {\n                                        return fromStorageInstanceResult(\n                                            id,\n                                            attachmentData,\n                                            this\n                                        );\n                                    });\n                            })\n                        );\n                }\n            });\n        }\n    },\n    overwritable: {},\n    hooks: {\n        preMigrateDocument: {\n            after: preMigrateDocument\n        },\n        postMigrateDocument: {\n            after: postMigrateDocument\n        }\n    }\n};\n"],"mappings":"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"}