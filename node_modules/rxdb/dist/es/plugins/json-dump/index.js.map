{"version":3,"file":"index.js","names":["createRxQuery","queryCollection","_getDefaultQuery","newRxError","flatClone","getDefaultRevision","now","dumpRxDatabase","collections","json","name","instanceToken","token","useCollections","Object","keys","filter","colName","includes","charAt","map","Promise","all","col","exportJSON","then","cols","importDumpRxDatabase","dump","missingCollections","length","colDump","importJSON","dumpRxCollection","schemaHash","schema","hash","docs","query","docData","_rev","_attachments","importDumpRxCollection","exportedJSON","own","storageInstance","bulkWrite","document","assign","_meta","lwt","_deleted","RxDBJsonDumpPlugin","rxdb","prototypes","RxDatabase","proto","RxCollection","overwritable"],"sources":["../../../../src/plugins/json-dump/index.ts"],"sourcesContent":["/**\n * this plugin adds the json export/import capabilities to RxDB\n */\nimport {\n    createRxQuery,\n    queryCollection,\n    _getDefaultQuery\n} from '../../rx-query';\nimport {\n    newRxError\n} from '../../rx-error';\nimport type {\n    RxDatabase,\n    RxCollection,\n    RxPlugin,\n    RxDocumentData\n} from '../../types';\nimport {\n    flatClone,\n    getDefaultRevision,\n    now\n} from '../../plugins/utils';\n\nfunction dumpRxDatabase(\n    this: RxDatabase,\n    collections?: string[]\n): Promise<any> {\n    const json: any = {\n        name: this.name,\n        instanceToken: this.token,\n        collections: []\n    };\n\n    const useCollections = Object.keys(this.collections)\n        .filter(colName => !collections || collections.includes(colName))\n        .filter(colName => colName.charAt(0) !== '_')\n        .map(colName => this.collections[colName]);\n\n    return Promise.all(\n        useCollections\n            .map(col => col.exportJSON())\n    ).then(cols => {\n        json.collections = cols;\n        return json;\n    });\n}\n\nconst importDumpRxDatabase = function (\n    this: RxDatabase,\n    dump: any\n) {\n    /**\n     * collections must be created before the import\n     * because we do not know about the other collection-settings here\n     */\n    const missingCollections = dump.collections\n        .filter((col: any) => !this.collections[col.name])\n        .map((col: any) => col.name);\n    if (missingCollections.length > 0) {\n        throw newRxError('JD1', {\n            missingCollections\n        });\n    }\n\n    return Promise.all(\n        dump.collections\n            .map((colDump: any) => this.collections[colDump.name].importJSON(colDump))\n    );\n};\n\nconst dumpRxCollection = function (\n    this: RxCollection\n) {\n    const json: any = {\n        name: this.name,\n        schemaHash: this.schema.hash,\n        docs: []\n    };\n\n    const query = createRxQuery(\n        'find',\n        _getDefaultQuery(),\n        this\n    );\n    return queryCollection(query)\n        .then((docs: any) => {\n            json.docs = docs.map((docData: any) => {\n                docData = flatClone(docData);\n                delete docData._rev;\n                delete docData._attachments;\n                return docData;\n            });\n            return json;\n        });\n};\n\nfunction importDumpRxCollection<RxDocType>(\n    this: RxCollection<RxDocType>,\n    exportedJSON: any\n): Promise<any> {\n    // check schemaHash\n    if (exportedJSON.schemaHash !== this.schema.hash) {\n        throw newRxError('JD2', {\n            schemaHash: exportedJSON.schemaHash,\n            own: this.schema.hash\n        });\n    }\n\n    const docs: RxDocType[] = exportedJSON.docs;\n    return this.storageInstance.bulkWrite(\n        docs.map(docData => {\n            const document: RxDocumentData<RxDocType> = Object.assign(\n                {},\n                docData,\n                {\n                    _meta: {\n                        lwt: now()\n                    },\n                    _rev: getDefaultRevision(),\n                    _attachments: {},\n                    _deleted: false\n                }\n            );\n            return {\n                document\n            };\n        }),\n        'json-dump-import'\n    );\n}\n\nexport const RxDBJsonDumpPlugin: RxPlugin = {\n    name: 'json-dump',\n    rxdb: true,\n    prototypes: {\n        RxDatabase: (proto: any) => {\n            proto.exportJSON = dumpRxDatabase;\n            proto.importJSON = importDumpRxDatabase;\n        },\n        RxCollection: (proto: any) => {\n            proto.exportJSON = dumpRxCollection;\n            proto.importJSON = importDumpRxCollection;\n        }\n    },\n    overwritable: {}\n};\n"],"mappings":"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"}