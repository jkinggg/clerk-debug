{"version":3,"file":"rx-storage-instance-memory.js","names":["Subject","getStartIndexStringFromLowerBound","getStartIndexStringFromUpperBound","getPrimaryFieldOfPrimaryKey","categorizeBulkWriteRows","ensureNotFalsy","getFromMapOrThrow","lastOfArray","now","PROMISE_RESOLVE_TRUE","PROMISE_RESOLVE_VOID","RX_META_LWT_MINIMUM","boundGE","boundGT","boundLE","attachmentMapKey","compareDocsWithIndex","ensureNotRemoved","getMemoryCollectionKey","putWriteRowToState","removeDocFromState","addIndexesToInternalsState","getMemoryIndexName","getQueryMatcher","getSortComparator","RxStorageInstanceMemory","storage","databaseName","collectionName","schema","internals","options","settings","closed","primaryPath","primaryKey","_proto","prototype","bulkWrite","documentWrites","context","ret","success","error","categorized","documents","errors","stateByIndex","Object","values","byIndex","bulkInsertDocs","i","length","writeRow","docId","document","undefined","bulkUpdateDocs","get","attachments","attachmentsMap","attachmentsAdd","forEach","attachment","set","documentId","attachmentId","attachmentData","attachmentsUpdate","attachmentsRemove","delete","eventBulk","events","lastState","newestRow","checkpoint","id","lwt","_meta","changes$","next","Promise","resolve","findDocumentsById","docIds","withDeleted","docInDb","_deleted","query","preparedQuery","queryPlan","skip","limit","Infinity","skipPlusLimit","queryMatcher","selectorSatisfiedByIndex","queryPlanFields","index","mustManuallyResort","sortFieldsSameAsIndexFields","concat","lowerBound","startKeys","lowerBoundString","inclusiveStart","upperBound","endKeys","upperBoundString","inclusiveEnd","indexName","docsWithIndex","indexOfLower","indexString","indexOfUpper","rows","done","currentDoc","doc","push","sortComparator","sort","slice","count","result","mode","getChangedDocumentsSince","sinceLwt","sinceId","lastDoc","cleanup","minimumDeletedTime","maxDeletionTime","getAttachmentData","data","changeStream","asObservable","remove","removed","collectionStates","version","close","reject","Error","refCount","conflictResultionTasks","conflictResultionTasks$","resolveConflictResultionTask","_taskSolution","createMemoryStorageInstance","params","collectionKey","Map","instance"],"sources":["../../../../src/plugins/storage-memory/rx-storage-instance-memory.ts"],"sourcesContent":["import {\n    Observable,\n    Subject\n} from 'rxjs';\nimport {\n    getStartIndexStringFromLowerBound,\n    getStartIndexStringFromUpperBound\n} from '../../custom-index';\nimport { getPrimaryFieldOfPrimaryKey } from '../../rx-schema-helper';\nimport {\n    categorizeBulkWriteRows\n} from '../../rx-storage-helper';\nimport type {\n    BulkWriteRow,\n    EventBulk,\n    QueryMatcher,\n    RxConflictResultionTask,\n    RxConflictResultionTaskSolution,\n    RxDocumentData,\n    RxDocumentDataById,\n    RxJsonSchema,\n    RxStorageBulkWriteResponse,\n    RxStorageChangeEvent,\n    RxStorageCountResult,\n    RxStorageDefaultCheckpoint,\n    RxStorageInstance,\n    RxStorageInstanceCreationParams,\n    RxStorageQueryResult,\n    StringKeys\n} from '../../types';\nimport {\n    ensureNotFalsy,\n    getFromMapOrThrow,\n    lastOfArray,\n    now,\n    PROMISE_RESOLVE_TRUE,\n    PROMISE_RESOLVE_VOID,\n    RX_META_LWT_MINIMUM\n} from '../../plugins/utils';\nimport {\n    boundGE,\n    boundGT,\n    boundLE\n} from './binary-search-bounds';\nimport {\n    attachmentMapKey,\n    compareDocsWithIndex,\n    ensureNotRemoved,\n    getMemoryCollectionKey,\n    putWriteRowToState,\n    removeDocFromState\n} from './memory-helper';\nimport {\n    addIndexesToInternalsState,\n    getMemoryIndexName\n} from './memory-indexes';\nimport type {\n    MemoryPreparedQuery,\n    MemoryStorageInternals,\n    RxStorageMemory,\n    RxStorageMemoryInstanceCreationOptions,\n    RxStorageMemorySettings\n} from './memory-types';\nimport { getQueryMatcher, getSortComparator } from '../../rx-query-helper';\n\nexport class RxStorageInstanceMemory<RxDocType> implements RxStorageInstance<\n    RxDocType,\n    MemoryStorageInternals<RxDocType>,\n    RxStorageMemoryInstanceCreationOptions,\n    RxStorageDefaultCheckpoint\n> {\n\n    public readonly primaryPath: StringKeys<RxDocumentData<RxDocType>>;\n    public closed = false;\n\n    constructor(\n        public readonly storage: RxStorageMemory,\n        public readonly databaseName: string,\n        public readonly collectionName: string,\n        public readonly schema: Readonly<RxJsonSchema<RxDocumentData<RxDocType>>>,\n        public readonly internals: MemoryStorageInternals<RxDocType>,\n        public readonly options: Readonly<RxStorageMemoryInstanceCreationOptions>,\n        public readonly settings: RxStorageMemorySettings\n    ) {\n        this.primaryPath = getPrimaryFieldOfPrimaryKey(this.schema.primaryKey);\n    }\n\n    bulkWrite(\n        documentWrites: BulkWriteRow<RxDocType>[],\n        context: string\n    ): Promise<RxStorageBulkWriteResponse<RxDocType>> {\n        ensureNotRemoved(this);\n        const primaryPath = this.primaryPath;\n\n        const ret: RxStorageBulkWriteResponse<RxDocType> = {\n            success: {},\n            error: {}\n        };\n\n        const categorized = categorizeBulkWriteRows<RxDocType>(\n            this,\n            primaryPath as any,\n            this.internals.documents,\n            documentWrites,\n            context\n        );\n        ret.error = categorized.errors;\n\n        /**\n         * Do inserts/updates\n         */\n        const stateByIndex = Object.values(this.internals.byIndex);\n\n        const bulkInsertDocs = categorized.bulkInsertDocs;\n        for (let i = 0; i < bulkInsertDocs.length; ++i) {\n            const writeRow = bulkInsertDocs[i];\n            const docId = writeRow.document[primaryPath];\n            putWriteRowToState(\n                docId as any,\n                this.internals,\n                stateByIndex,\n                writeRow,\n                undefined\n            );\n            ret.success[docId as any] = writeRow.document;\n        }\n\n        const bulkUpdateDocs = categorized.bulkUpdateDocs;\n        for (let i = 0; i < bulkUpdateDocs.length; ++i) {\n            const writeRow = bulkUpdateDocs[i];\n            const docId = writeRow.document[primaryPath];\n            putWriteRowToState(\n                docId as any,\n                this.internals,\n                stateByIndex,\n                writeRow,\n                this.internals.documents.get(docId as any)\n            );\n            ret.success[docId as any] = writeRow.document;\n        }\n\n        /**\n         * Handle attachments\n         */\n        if (this.schema.attachments) {\n            const attachmentsMap = this.internals.attachments;\n            categorized.attachmentsAdd.forEach(attachment => {\n                attachmentsMap.set(\n                    attachmentMapKey(attachment.documentId, attachment.attachmentId),\n                    attachment.attachmentData\n                );\n            });\n            if (this.schema.attachments) {\n                categorized.attachmentsUpdate.forEach(attachment => {\n                    attachmentsMap.set(\n                        attachmentMapKey(attachment.documentId, attachment.attachmentId),\n                        attachment.attachmentData\n                    );\n                });\n                categorized.attachmentsRemove.forEach(attachment => {\n                    attachmentsMap.delete(\n                        attachmentMapKey(attachment.documentId, attachment.attachmentId)\n                    );\n                });\n            }\n        }\n\n        if (categorized.eventBulk.events.length > 0) {\n            const lastState = ensureNotFalsy(categorized.newestRow).document;\n            categorized.eventBulk.checkpoint = {\n                id: lastState[primaryPath],\n                lwt: lastState._meta.lwt\n            };\n            this.internals.changes$.next(categorized.eventBulk);\n        }\n        return Promise.resolve(ret);\n    }\n\n    findDocumentsById(\n        docIds: string[],\n        withDeleted: boolean\n    ): Promise<RxDocumentDataById<RxDocType>> {\n        const ret: RxDocumentDataById<RxDocType> = {};\n        for (let i = 0; i < docIds.length; ++i) {\n            const docId = docIds[i];\n            const docInDb = this.internals.documents.get(docId);\n            if (\n                docInDb &&\n                (\n                    !docInDb._deleted ||\n                    withDeleted\n                )\n            ) {\n                ret[docId] = docInDb;\n            }\n        }\n        return Promise.resolve(ret);\n    }\n\n    query(preparedQuery: MemoryPreparedQuery<RxDocType>): Promise<RxStorageQueryResult<RxDocType>> {\n        const queryPlan = preparedQuery.queryPlan;\n        const query = preparedQuery.query;\n        const skip = query.skip ? query.skip : 0;\n        const limit = query.limit ? query.limit : Infinity;\n        const skipPlusLimit = skip + limit;\n\n        let queryMatcher: QueryMatcher<RxDocumentData<RxDocType>> | false = false;\n        if (!queryPlan.selectorSatisfiedByIndex) {\n            queryMatcher = getQueryMatcher(\n                this.schema,\n                preparedQuery.query\n            );\n        }\n\n        const queryPlanFields: string[] = queryPlan.index;\n        const mustManuallyResort = !queryPlan.sortFieldsSameAsIndexFields;\n        const index: string[] | undefined = ['_deleted'].concat(queryPlanFields);\n        let lowerBound: any[] = queryPlan.startKeys;\n        lowerBound = [false].concat(lowerBound);\n        const lowerBoundString = getStartIndexStringFromLowerBound(\n            this.schema,\n            index,\n            lowerBound,\n            queryPlan.inclusiveStart\n        );\n\n        let upperBound: any[] = queryPlan.endKeys;\n        upperBound = [false].concat(upperBound);\n        const upperBoundString = getStartIndexStringFromUpperBound(\n            this.schema,\n            index,\n            upperBound,\n            queryPlan.inclusiveEnd\n        );\n        const indexName = getMemoryIndexName(index);\n        const docsWithIndex = this.internals.byIndex[indexName].docsWithIndex;\n        let indexOfLower = boundGE(\n            docsWithIndex,\n            {\n                indexString: lowerBoundString\n            } as any,\n            compareDocsWithIndex\n        );\n        const indexOfUpper = boundLE(\n            docsWithIndex,\n            {\n                indexString: upperBoundString\n            } as any,\n            compareDocsWithIndex\n        );\n\n        let rows: RxDocumentData<RxDocType>[] = [];\n        let done = false;\n        while (!done) {\n            const currentDoc = docsWithIndex[indexOfLower];\n\n\n            if (\n                !currentDoc ||\n                indexOfLower > indexOfUpper\n            ) {\n                break;\n            }\n\n            if (!queryMatcher || queryMatcher(currentDoc.doc)) {\n                rows.push(currentDoc.doc);\n            }\n\n            if (\n                (rows.length >= skipPlusLimit && !mustManuallyResort) ||\n                indexOfLower >= docsWithIndex.length\n            ) {\n                done = true;\n            }\n\n            indexOfLower++;\n        }\n\n        if (mustManuallyResort) {\n            const sortComparator = getSortComparator(this.schema, preparedQuery.query);\n            rows = rows.sort(sortComparator);\n        }\n\n        // apply skip and limit boundaries.\n        rows = rows.slice(skip, skipPlusLimit);\n        return Promise.resolve({\n            documents: rows\n        });\n    }\n\n    async count(\n        preparedQuery: MemoryPreparedQuery<RxDocType>\n    ): Promise<RxStorageCountResult> {\n        const result = await this.query(preparedQuery);\n        return {\n            count: result.documents.length,\n            mode: 'fast'\n        };\n    }\n\n    getChangedDocumentsSince(\n        limit: number,\n        checkpoint?: RxStorageDefaultCheckpoint\n    ): Promise<{\n        documents: RxDocumentData<RxDocType>[];\n        checkpoint: RxStorageDefaultCheckpoint;\n    }> {\n        const sinceLwt = checkpoint ? checkpoint.lwt : RX_META_LWT_MINIMUM;\n        const sinceId = checkpoint ? checkpoint.id : '';\n\n        const index = ['_meta.lwt', this.primaryPath as any];\n        const indexName = getMemoryIndexName(index);\n\n        const lowerBoundString = getStartIndexStringFromLowerBound(\n            this.schema,\n            ['_meta.lwt', this.primaryPath as any],\n            [\n                sinceLwt,\n                sinceId\n            ],\n            false\n        );\n\n        const docsWithIndex = this.internals.byIndex[indexName].docsWithIndex;\n        let indexOfLower = boundGT(\n            docsWithIndex,\n            {\n                indexString: lowerBoundString\n            } as any,\n            compareDocsWithIndex\n        );\n\n        // TODO use array.slice() so we do not have to iterate here\n        const rows: RxDocumentData<RxDocType>[] = [];\n        while (rows.length < limit && indexOfLower < docsWithIndex.length) {\n            const currentDoc = docsWithIndex[indexOfLower];\n            rows.push(currentDoc.doc);\n            indexOfLower++;\n        }\n\n        const lastDoc = lastOfArray(rows);\n        return Promise.resolve({\n            documents: rows,\n            checkpoint: lastDoc ? {\n                id: lastDoc[this.primaryPath] as any,\n                lwt: lastDoc._meta.lwt\n            } : checkpoint ? checkpoint : {\n                id: '',\n                lwt: 0\n            }\n        });\n    }\n\n    cleanup(minimumDeletedTime: number): Promise<boolean> {\n        const maxDeletionTime = now() - minimumDeletedTime;\n        const index = ['_deleted', '_meta.lwt', this.primaryPath as any];\n        const indexName = getMemoryIndexName(index);\n        const docsWithIndex = this.internals.byIndex[indexName].docsWithIndex;\n\n        const lowerBoundString = getStartIndexStringFromLowerBound(\n            this.schema,\n            index,\n            [\n                true,\n                0,\n                ''\n            ],\n            false\n        );\n\n        let indexOfLower = boundGT(\n            docsWithIndex,\n            {\n                indexString: lowerBoundString\n            } as any,\n            compareDocsWithIndex\n        );\n\n        let done = false;\n        while (!done) {\n            const currentDoc = docsWithIndex[indexOfLower];\n            if (!currentDoc || currentDoc.doc._meta.lwt > maxDeletionTime) {\n                done = true;\n            } else {\n                removeDocFromState(\n                    this.primaryPath as any,\n                    this.schema,\n                    this.internals,\n                    currentDoc.doc\n                );\n                indexOfLower++;\n            }\n        }\n        return PROMISE_RESOLVE_TRUE;\n    }\n\n    getAttachmentData(documentId: string, attachmentId: string): Promise<string> {\n        ensureNotRemoved(this);\n        const data = getFromMapOrThrow(\n            this.internals.attachments,\n            attachmentMapKey(documentId, attachmentId)\n        );\n        return Promise.resolve(data.data);\n    }\n\n    changeStream(): Observable<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, RxStorageDefaultCheckpoint>> {\n        ensureNotRemoved(this);\n        return this.internals.changes$.asObservable();\n    }\n\n    async remove(): Promise<void> {\n        ensureNotRemoved(this);\n\n        this.internals.removed = true;\n        this.storage.collectionStates.delete(\n            getMemoryCollectionKey(\n                this.databaseName,\n                this.collectionName,\n                this.schema.version\n            )\n        );\n        await this.close();\n    }\n\n    close(): Promise<void> {\n        if (this.closed) {\n            return Promise.reject(new Error('already closed'));\n        }\n        this.closed = true;\n\n        this.internals.refCount = this.internals.refCount - 1;\n        return PROMISE_RESOLVE_VOID;\n    }\n\n    conflictResultionTasks(): Observable<RxConflictResultionTask<RxDocType>> {\n        return this.internals.conflictResultionTasks$.asObservable();\n    }\n    resolveConflictResultionTask(_taskSolution: RxConflictResultionTaskSolution<RxDocType>): Promise<void> {\n        return PROMISE_RESOLVE_VOID;\n    }\n}\n\nexport function createMemoryStorageInstance<RxDocType>(\n    storage: RxStorageMemory,\n    params: RxStorageInstanceCreationParams<RxDocType, RxStorageMemoryInstanceCreationOptions>,\n    settings: RxStorageMemorySettings\n): Promise<RxStorageInstanceMemory<RxDocType>> {\n    const collectionKey = getMemoryCollectionKey(\n        params.databaseName,\n        params.collectionName,\n        params.schema.version\n    );\n\n    let internals = storage.collectionStates.get(collectionKey);\n    if (!internals) {\n        internals = {\n            removed: false,\n            refCount: 1,\n            documents: new Map(),\n            attachments: params.schema.attachments ? new Map() : undefined as any,\n            byIndex: {},\n            conflictResultionTasks$: new Subject(),\n            changes$: new Subject()\n        };\n        addIndexesToInternalsState(internals, params.schema);\n        storage.collectionStates.set(collectionKey, internals);\n    } else {\n        internals.refCount = internals.refCount + 1;\n    }\n\n    const instance = new RxStorageInstanceMemory(\n        storage,\n        params.databaseName,\n        params.collectionName,\n        params.schema,\n        internals,\n        params.options,\n        settings\n    );\n    return Promise.resolve(instance);\n}\n"],"mappings":"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"}