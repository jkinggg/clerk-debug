{"version":3,"file":"rx-storage-multiinstance.js","names":["Subject","mergeWith","BroadcastChannel","BROADCAST_CHANNEL_BY_TOKEN","Map","getBroadcastChannelReference","databaseInstanceToken","databaseName","refObject","state","get","bc","refs","Set","set","add","removeBroadcastChannelReference","delete","size","close","addRxStorageMultiInstanceSupport","storageName","instanceCreationParams","instance","providedBroadcastChannel","multiInstance","broadcastChannel","changesFromOtherInstances$","eventListener","msg","collectionName","version","schema","next","eventBulk","addEventListener","oldChangestream$","changeStream","closed","sub","subscribe","postMessage","asObservable","pipe","oldClose","bind","unsubscribe","removeEventListener","oldRemove","remove"],"sources":["../../src/rx-storage-multiinstance.ts"],"sourcesContent":["/**\n * When a persistent RxStorage is used in more the one JavaScript process,\n * the even stream of the changestream() function must be broadcasted to the other\n * RxStorageInstances of the same databaseName+collectionName.\n *\n * In the past this was done by RxDB but it makes more sense to do this\n * at the RxStorage level so that the broadcasting etc can all happen inside of a WebWorker\n * and not on the main thread.\n * Also it makes it less complex to stack up different RxStorages onto each other\n * like what we do with the in-memory plugin.\n *\n * This is intended to be used inside of createStorageInstance() of a storage.\n * Do not use this if the storage anyway broadcasts the events like when using MongoDB\n * or in the future W3C might introduce a way to listen to IndexedDB changes.\n */\n\nimport { Observable, Subject } from 'rxjs';\nimport { mergeWith } from 'rxjs/operators';\nimport type {\n    EventBulk,\n    RxStorageChangeEvent,\n    RxStorageInstance,\n    RxStorageInstanceCreationParams\n} from './types';\n\nimport {\n    BroadcastChannel\n} from 'broadcast-channel';\n\n/**\n * The broadcast-channel is reused by the databaseInstanceToken.\n * This is required so that it is easy to simulate multi-tab usage\n * in the test where different instances of the same RxDatabase must\n * have different broadcast channels.\n * But also it ensures that for each RxDatabase we only create a single\n * broadcast channel that can even be reused in the leader election plugin.\n *\n * TODO at the end of the unit tests,\n * we should ensure that all channels are closed and cleaned up.\n * Otherwise we have forgot something.\n */\nexport const BROADCAST_CHANNEL_BY_TOKEN: Map<string, {\n    bc: BroadcastChannel<RxStorageMultiInstanceBroadcastType>;\n    /**\n     * Contains all context objects that currently use the channel.\n     * If this becomes empty, we can close the channel\n     */\n    refs: Set<any>;\n}> = new Map();\n\n\nexport type RxStorageMultiInstanceBroadcastType = {\n    storageName: string;\n    collectionName: string;\n    /**\n     * collection.schema.version\n     */\n    version: number;\n    databaseName: string;\n    eventBulk: EventBulk<any, any>;\n};\n\nexport function getBroadcastChannelReference(\n    databaseInstanceToken: string,\n    databaseName: string,\n    refObject: any\n): BroadcastChannel<RxStorageMultiInstanceBroadcastType> {\n    let state = BROADCAST_CHANNEL_BY_TOKEN.get(databaseInstanceToken);\n    if (!state) {\n        state = {\n            /**\n             * We have to use the databaseName instead of the databaseInstanceToken\n             * in the BroadcastChannel name because different instances must end with the same\n             * channel name to be able to broadcast messages between each other.\n             */\n            bc: new BroadcastChannel('RxDB:' + databaseName),\n            refs: new Set<any>()\n        };\n        BROADCAST_CHANNEL_BY_TOKEN.set(databaseInstanceToken, state);\n    }\n    state.refs.add(refObject);\n    return state.bc;\n}\n\nexport function removeBroadcastChannelReference(\n    databaseInstanceToken: string,\n    refObject: any\n) {\n    const state = BROADCAST_CHANNEL_BY_TOKEN.get(databaseInstanceToken);\n    if (!state) {\n        return;\n    }\n    state.refs.delete(refObject);\n    if (state.refs.size === 0) {\n        BROADCAST_CHANNEL_BY_TOKEN.delete(databaseInstanceToken);\n        return state.bc.close();\n    }\n}\n\n\nexport function addRxStorageMultiInstanceSupport<RxDocType>(\n    storageName: string,\n    instanceCreationParams: RxStorageInstanceCreationParams<RxDocType, any>,\n    instance: RxStorageInstance<RxDocType, any, any>,\n    /**\n     * If provided, that channel will be used\n     * instead of an own one.\n     */\n    providedBroadcastChannel?: BroadcastChannel<any>\n) {\n    if (!instanceCreationParams.multiInstance) {\n        return;\n    }\n\n    type Emit = EventBulk<RxStorageChangeEvent<RxDocType>, any>;\n\n    const broadcastChannel = providedBroadcastChannel ?\n        providedBroadcastChannel :\n        getBroadcastChannelReference(\n            instanceCreationParams.databaseInstanceToken,\n            instance.databaseName,\n            instance\n        );\n\n    const changesFromOtherInstances$: Subject<Emit> = new Subject();\n\n\n    const eventListener = (msg: RxStorageMultiInstanceBroadcastType) => {\n        if (\n            msg.storageName === storageName &&\n            msg.databaseName === instanceCreationParams.databaseName &&\n            msg.collectionName === instanceCreationParams.collectionName &&\n            msg.version === instanceCreationParams.schema.version\n        ) {\n            changesFromOtherInstances$.next(msg.eventBulk);\n        }\n    };\n    broadcastChannel.addEventListener('message', eventListener);\n\n    const oldChangestream$ = instance.changeStream();\n\n    let closed = false;\n    const sub = oldChangestream$.subscribe(eventBulk => {\n        if (closed) {\n            return;\n        }\n        broadcastChannel.postMessage({\n            storageName: storageName,\n            databaseName: instanceCreationParams.databaseName,\n            collectionName: instanceCreationParams.collectionName,\n            version: instanceCreationParams.schema.version,\n            eventBulk\n        });\n    });\n\n    instance.changeStream = function (): Observable<Emit> {\n        return changesFromOtherInstances$.asObservable().pipe(\n            mergeWith(oldChangestream$)\n        );\n    };\n\n    const oldClose = instance.close.bind(instance);\n    instance.close = async function () {\n        closed = true;\n        sub.unsubscribe();\n        broadcastChannel.removeEventListener('message', eventListener);\n        if (!providedBroadcastChannel) {\n            await removeBroadcastChannelReference(\n                instanceCreationParams.databaseInstanceToken,\n                instance\n            );\n        }\n        return oldClose();\n    };\n\n    const oldRemove = instance.remove.bind(instance);\n    instance.remove = async function () {\n        closed = true;\n        sub.unsubscribe();\n        broadcastChannel.removeEventListener('message', eventListener);\n        if (!providedBroadcastChannel) {\n            await removeBroadcastChannelReference(\n                instanceCreationParams.databaseInstanceToken,\n                instance\n            );\n        }\n        return oldRemove();\n    };\n}\n"],"mappings":"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"}