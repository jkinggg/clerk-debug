{"version":3,"file":"checkpoint.js","names":["getComposedPrimaryKeyOfDocumentData","stackCheckpoints","createRevision","ensureNotFalsy","getDefaultRevision","getDefaultRxDocumentMeta","getFromObjectOrThrow","now","getLastCheckpointDoc","state","direction","checkpointDocId","input","metaInstance","schema","isCheckpoint","itemId","checkpointResult","findDocumentsById","checkpointDoc","lastCheckpointDoc","data","undefined","setCheckpoint","checkpoint","previousCheckpointDoc","events","canceled","getValue","JSON","stringify","newDoc","id","_deleted","_attachments","_meta","_rev","lwt","identifier","result","bulkWrite","previous","document","success","error","status","documentInDb","getCheckpointKey","hash","hashFunction","forkInstance","databaseName","collectionName","join"],"sources":["../../../src/replication-protocol/checkpoint.ts"],"sourcesContent":["import { getComposedPrimaryKeyOfDocumentData } from '../rx-schema-helper';\nimport { stackCheckpoints } from '../rx-storage-helper';\nimport type {\n    RxDocumentData,\n    RxStorageInstanceReplicationInput,\n    RxStorageInstanceReplicationState,\n    RxStorageReplicationDirection,\n    RxStorageReplicationMeta\n} from '../types';\nimport {\n    createRevision,\n    ensureNotFalsy,\n    getDefaultRevision,\n    getDefaultRxDocumentMeta,\n    getFromObjectOrThrow,\n    now\n} from '../plugins/utils';\n\nexport async function getLastCheckpointDoc<RxDocType, CheckpointType>(\n    state: RxStorageInstanceReplicationState<RxDocType>,\n    direction: RxStorageReplicationDirection\n): Promise<undefined | CheckpointType> {\n    const checkpointDocId = getComposedPrimaryKeyOfDocumentData(\n        state.input.metaInstance.schema,\n        {\n            isCheckpoint: '1',\n            itemId: direction\n        }\n    );\n    const checkpointResult = await state.input.metaInstance.findDocumentsById(\n        [\n            checkpointDocId\n        ],\n        false\n    );\n\n    const checkpointDoc = checkpointResult[checkpointDocId];\n    state.lastCheckpointDoc[direction] = checkpointDoc;\n    if (checkpointDoc) {\n        return checkpointDoc.data;\n    } else {\n        return undefined;\n    }\n}\n\n\n/**\n * Sets the checkpoint,\n * automatically resolves conflicts that appear.\n */\nexport async function setCheckpoint<RxDocType, CheckpointType>(\n    state: RxStorageInstanceReplicationState<RxDocType>,\n    direction: RxStorageReplicationDirection,\n    checkpoint: CheckpointType\n) {\n    let previousCheckpointDoc = state.lastCheckpointDoc[direction];\n    if (\n        checkpoint &&\n        /**\n         * If the replication is already canceled,\n         * we do not write a checkpoint\n         * because that could mean we write a checkpoint\n         * for data that has been fetched from the master\n         * but not been written to the child.\n         */\n        !state.events.canceled.getValue() &&\n        /**\n         * Only write checkpoint if it is different from before\n         * to have less writes to the storage.\n         */\n        (\n            !previousCheckpointDoc ||\n            JSON.stringify(previousCheckpointDoc.data) !== JSON.stringify(checkpoint)\n        )\n    ) {\n        const newDoc: RxDocumentData<RxStorageReplicationMeta> = {\n            id: '',\n            isCheckpoint: '1',\n            itemId: direction,\n            _deleted: false,\n            _attachments: {},\n            data: checkpoint,\n            _meta: getDefaultRxDocumentMeta(),\n            _rev: getDefaultRevision()\n        };\n        newDoc.id = getComposedPrimaryKeyOfDocumentData(\n            state.input.metaInstance.schema,\n            newDoc\n        );\n        while (true) {\n            /**\n             * Instead of just storing the new checkpoint,\n             * we have to stack up the checkpoint with the previous one.\n             * This is required for plugins like the sharding RxStorage\n             * where the changeStream events only contain a Partial of the\n             * checkpoint.\n             */\n            if (previousCheckpointDoc) {\n                newDoc.data = stackCheckpoints([\n                    previousCheckpointDoc.data,\n                    newDoc.data\n                ]);\n            }\n            newDoc._meta.lwt = now();\n            newDoc._rev = createRevision(\n                state.input.identifier,\n                previousCheckpointDoc\n            );\n            const result = await state.input.metaInstance.bulkWrite([{\n                previous: previousCheckpointDoc,\n                document: newDoc\n            }], 'replication-set-checkpoint');\n\n            if (result.success[newDoc.id]) {\n                state.lastCheckpointDoc[direction] = getFromObjectOrThrow(\n                    result.success,\n                    newDoc.id\n                );\n                return;\n            } else {\n                const error = getFromObjectOrThrow(\n                    result.error,\n                    newDoc.id\n                );\n                if (error.status !== 409) {\n                    throw error;\n                } else {\n                    previousCheckpointDoc = ensureNotFalsy(error.documentInDb);\n                    newDoc._rev = createRevision(\n                        state.input.identifier,\n                        previousCheckpointDoc\n                    );\n                }\n            }\n        }\n    }\n}\n\nexport function getCheckpointKey<RxDocType>(\n    input: RxStorageInstanceReplicationInput<RxDocType>\n): string {\n    const hash = input.hashFunction([\n        input.identifier,\n        input.forkInstance.databaseName,\n        input.forkInstance.collectionName\n    ].join('||'));\n    return 'rx-storage-replication-' + hash;\n}\n"],"mappings":"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"}