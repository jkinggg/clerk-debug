{"version":3,"file":"rx-database.js","names":["IdleQueue","pluginMissing","flatClone","PROMISE_RESOLVE_FALSE","randomCouchString","ensureNotFalsy","getDefaultRevision","getDefaultRxDocumentMeta","defaultHashSha256","newRxError","createRxSchema","runPluginHooks","runAsyncPluginHooks","Subject","mergeMap","createRxCollection","flatCloneDocWithMeta","getSingleDocument","getWrappedStorageInstance","INTERNAL_STORAGE_NAME","ObliviousSet","ensureStorageTokenDocumentExists","getAllCollectionDocuments","getPrimaryKeyOfInternalDocument","INTERNAL_CONTEXT_COLLECTION","INTERNAL_STORE_SCHEMA","_collectionNamePrimary","removeCollectionStorages","overwritable","USED_DATABASE_NAMES","Set","DB_COUNT","RxDatabaseBase","name","token","storage","instanceCreationOptions","password","multiInstance","eventReduce","options","internalStore","hashFunction","cleanupPolicy","allowSlowCount","idleQueue","storageInstances","_subs","startupErrors","onDestroy","destroyed","collections","eventBulks$","observable$","pipe","changeEventBulk","events","storageToken","storageTokenDocument","emittedEventBulkIds","asRxDatabase","catch","err","push","then","doc","data","_proto","prototype","$emit","has","id","add","next","removeCollectionDoc","schema","writeDoc","_deleted","bulkWrite","document","previous","addCollections","collectionCreators","jsonSchemas","schemas","bulkPutDocs","useArgsByCollectionName","Object","entries","forEach","args","collectionName","rxJsonSchema","collectionNameWithVersion","collectionDocData","key","context","schemaHash","hash","jsonSchema","version","connectedStorages","_meta","_rev","_attachments","useArgs","assign","database","hookData","conflictHandler","putDocsResult","ensureNoStartupErrors","error","_id","status","writeError","docInDb","documentInDb","collection","previousSchemaHash","previousSchema","ret","Promise","all","keys","map","defineProperty","get","lockedRun","fn","wrapCall","requestIdlePromise","exportJSON","_collections","importJSON","_exportedJSON","backup","_options","leaderElector","isLeader","waitForLeadership","migrationStates","destroy","complete","sub","unsubscribe","col","close","delete","remove","removeRxDatabase","_createClass","throwIfDatabaseNameUsed","link","createRxDatabaseStorageInstance","databaseInstanceToken","databaseName","createStorageInstance","devMode","isDevMode","createRxDatabase","ignoreDuplicate","localDocuments","storageInstance","rxDatabase","creator","dbInternalsStorageInstance","collectionDocs","statics","collectionNames","removedCollectionNames","Array","from","isRxDatabase","obj","dbCount","isRxDatabaseFirstTimeInstantiated","tokenDoc","instanceToken"],"sources":["../../src/rx-database.ts"],"sourcesContent":["import { IdleQueue } from 'custom-idle-queue';\nimport type {\n    LeaderElector\n} from 'broadcast-channel';\nimport type {\n    CollectionsOfDatabase,\n    RxDatabase,\n    RxCollectionCreator,\n    RxJsonSchema,\n    RxCollection,\n    RxDumpDatabase,\n    RxDumpDatabaseAny,\n    AllMigrationStates,\n    BackupOptions,\n    RxStorage,\n    RxStorageInstance,\n    BulkWriteRow,\n    RxChangeEvent,\n    RxDatabaseCreator,\n    RxChangeEventBulk,\n    RxDocumentData,\n    RxCleanupPolicy,\n    InternalStoreDocType,\n    InternalStoreStorageTokenDocType,\n    InternalStoreCollectionDocType,\n    RxTypeError,\n    RxError,\n    HashFunction,\n    MaybePromise\n} from './types';\n\nimport {\n    pluginMissing,\n    flatClone,\n    PROMISE_RESOLVE_FALSE,\n    randomCouchString,\n    ensureNotFalsy,\n    getDefaultRevision,\n    getDefaultRxDocumentMeta,\n    defaultHashSha256\n} from './plugins/utils';\nimport {\n    newRxError\n} from './rx-error';\nimport {\n    createRxSchema,\n    RxSchema\n} from './rx-schema';\nimport {\n    runPluginHooks,\n    runAsyncPluginHooks\n} from './hooks';\nimport {\n    Subject,\n    Subscription,\n    Observable\n} from 'rxjs';\nimport {\n    mergeMap\n} from 'rxjs/operators';\nimport {\n    createRxCollection\n} from './rx-collection';\nimport {\n    flatCloneDocWithMeta,\n    getSingleDocument,\n    getWrappedStorageInstance,\n    INTERNAL_STORAGE_NAME,\n    WrappedRxStorageInstance\n} from './rx-storage-helper';\nimport type { RxBackupState } from './plugins/backup';\nimport { ObliviousSet } from 'oblivious-set';\nimport {\n    ensureStorageTokenDocumentExists,\n    getAllCollectionDocuments,\n    getPrimaryKeyOfInternalDocument,\n    INTERNAL_CONTEXT_COLLECTION,\n    INTERNAL_STORE_SCHEMA,\n    _collectionNamePrimary\n} from './rx-database-internal-store';\nimport { removeCollectionStorages } from './rx-collection-helper';\nimport { overwritable } from './overwritable';\n\n/**\n * stores the used database names\n * so we can throw when the same database is created more then once.\n */\nconst USED_DATABASE_NAMES: Set<string> = new Set();\n\nlet DB_COUNT = 0;\n\nexport class RxDatabaseBase<\n    Internals,\n    InstanceCreationOptions,\n    Collections = CollectionsOfDatabase,\n> {\n\n    public readonly idleQueue: IdleQueue = new IdleQueue();\n\n    /**\n     * Contains all known non-closed storage instances\n     * that belong to this database.\n     * Used in plugins and unit tests.\n     */\n    public readonly storageInstances = new Set<WrappedRxStorageInstance<any, Internals, InstanceCreationOptions>>();\n\n    constructor(\n        public readonly name: string,\n        /**\n         * Uniquely identifies the instance\n         * of this RxDatabase.\n         */\n        public readonly token: string,\n        public readonly storage: RxStorage<Internals, InstanceCreationOptions>,\n        public readonly instanceCreationOptions: InstanceCreationOptions,\n        public readonly password: any,\n        public readonly multiInstance: boolean,\n        public readonly eventReduce: boolean = false,\n        public options: any = {},\n        /**\n         * Stores information documents about the collections of the database\n         */\n        public readonly internalStore: RxStorageInstance<InternalStoreDocType, Internals, InstanceCreationOptions>,\n        public readonly hashFunction: HashFunction,\n        public readonly cleanupPolicy?: Partial<RxCleanupPolicy>,\n        public readonly allowSlowCount?: boolean\n    ) {\n        DB_COUNT++;\n\n        /**\n         * In the dev-mode, we create a pseudoInstance\n         * to get all properties of RxDatabase and ensure they do not\n         * conflict with the collection names etc.\n         * So only if it is not pseudoInstance,\n         * we have all values to prepare a real RxDatabase.\n         *\n         * TODO this is ugly, we should use a different way in the dev-mode\n         * so that all non-dev-mode code can be cleaner.\n         */\n        if (this.name !== 'pseudoInstance') {\n            /**\n             * Wrap the internal store\n             * to ensure that calls to it also end up in\n             * calculation of the idle state and the hooks.\n             */\n            this.internalStore = getWrappedStorageInstance(\n                this.asRxDatabase,\n                internalStore,\n                INTERNAL_STORE_SCHEMA\n            );\n\n            /**\n             * Start writing the storage token.\n             * Do not await the creation because it would run\n             * in a critical path that increases startup time.\n             *\n             * Writing the token takes about 20 milliseconds\n             * even on a fast adapter, so this is worth it.\n             */\n            this.storageTokenDocument = ensureStorageTokenDocumentExists(this.asRxDatabase)\n                .catch(err => this.startupErrors.push(err) as any);\n            this.storageToken = this.storageTokenDocument\n                .then(doc => doc.data.token)\n                .catch(err => this.startupErrors.push(err) as any);\n        }\n    }\n\n    get $(): Observable<RxChangeEvent<any>> {\n        return this.observable$;\n    }\n\n    public _subs: Subscription[] = [];\n\n    /**\n     * Because having unhandled exceptions would fail,\n     * we have to store the async errors of the constructor here\n     * so we can throw them later.\n     */\n    public startupErrors: (RxError | RxTypeError)[] = [];\n\n    /**\n     * When the database is destroyed,\n     * these functions will be called an awaited.\n     * Used to automatically clean up stuff that\n     * belongs to this collection.\n     */\n    public onDestroy: (() => MaybePromise<any>)[] = [];\n    public destroyed: boolean = false;\n    public collections: Collections = {} as any;\n    public readonly eventBulks$: Subject<RxChangeEventBulk<any>> = new Subject();\n    private observable$: Observable<RxChangeEvent<any>> = this.eventBulks$\n        .pipe(\n            mergeMap(changeEventBulk => changeEventBulk.events)\n        );\n\n    /**\n     * Unique token that is stored with the data.\n     * Used to detect if the dataset has been deleted\n     * and if two RxDatabase instances work on the same dataset or not.\n     *\n     * Because reading and writing the storageToken runs in the hot path\n     * of database creation, we do not await the storageWrites but instead\n     * work with the promise when we need the value.\n     */\n    public storageToken: Promise<string> = PROMISE_RESOLVE_FALSE as any;\n    /**\n     * Stores the whole state of the internal storage token document.\n     * We need this in some plugins.\n     */\n    public storageTokenDocument: Promise<RxDocumentData<InternalStoreStorageTokenDocType>> = PROMISE_RESOLVE_FALSE as any;\n\n    /**\n     * Contains the ids of all event bulks that have been emitted\n     * by the database.\n     * Used to detect duplicates that come in again via BroadcastChannel\n     * or other streams.\n     * TODO instead of having this here, we should add a test to ensure each RxStorage\n     * behaves equal and does never emit duplicate eventBulks.\n     */\n    public emittedEventBulkIds: ObliviousSet<string> = new ObliviousSet(60 * 1000);\n\n    /**\n     * This is the main handle-point for all change events\n     * ChangeEvents created by this instance go:\n     * RxDocument -> RxCollection -> RxDatabase.$emit -> MultiInstance\n     * ChangeEvents created by other instances go:\n     * MultiInstance -> RxDatabase.$emit -> RxCollection -> RxDatabase\n     */\n    $emit(changeEventBulk: RxChangeEventBulk<any>) {\n        if (this.emittedEventBulkIds.has(changeEventBulk.id)) {\n            return;\n        }\n        this.emittedEventBulkIds.add(changeEventBulk.id);\n\n        // emit into own stream\n        this.eventBulks$.next(changeEventBulk);\n    }\n\n    /**\n     * removes the collection-doc from the internalStore\n     */\n    async removeCollectionDoc(name: string, schema: any): Promise<void> {\n        const doc = await getSingleDocument(\n            this.internalStore,\n            getPrimaryKeyOfInternalDocument(\n                _collectionNamePrimary(name, schema),\n                INTERNAL_CONTEXT_COLLECTION\n            )\n        );\n        if (!doc) {\n            throw newRxError('SNH', { name, schema });\n        }\n        const writeDoc = flatCloneDocWithMeta(doc);\n        writeDoc._deleted = true;\n\n        await this.internalStore.bulkWrite([{\n            document: writeDoc,\n            previous: doc\n        }], 'rx-database-remove-collection');\n    }\n\n    /**\n     * creates multiple RxCollections at once\n     * to be much faster by saving db txs and doing stuff in bulk-operations\n     * This function is not called often, but mostly in the critical path at the initial page load\n     * So it must be as fast as possible.\n     */\n    async addCollections<CreatedCollections = Partial<Collections>>(collectionCreators: {\n        [key in keyof CreatedCollections]: RxCollectionCreator<any>\n    }): Promise<{ [key in keyof CreatedCollections]: RxCollection }> {\n        const jsonSchemas: { [key in keyof CreatedCollections]: RxJsonSchema<any> } = {} as any;\n        const schemas: { [key in keyof CreatedCollections]: RxSchema<any> } = {} as any;\n        const bulkPutDocs: BulkWriteRow<InternalStoreCollectionDocType>[] = [];\n        const useArgsByCollectionName: any = {};\n\n        Object.entries(collectionCreators).forEach(([name, args]) => {\n            const collectionName: keyof CreatedCollections = name as any;\n            const rxJsonSchema = (args as RxCollectionCreator<any>).schema;\n            jsonSchemas[collectionName] = rxJsonSchema;\n            const schema = createRxSchema(rxJsonSchema, this.hashFunction);\n            schemas[collectionName] = schema;\n\n            // collection already exists\n            if ((this.collections as any)[name]) {\n                throw newRxError('DB3', {\n                    name\n                });\n            }\n\n            const collectionNameWithVersion = _collectionNamePrimary(name, rxJsonSchema);\n            const collectionDocData: RxDocumentData<InternalStoreCollectionDocType> = {\n                id: getPrimaryKeyOfInternalDocument(\n                    collectionNameWithVersion,\n                    INTERNAL_CONTEXT_COLLECTION\n                ),\n                key: collectionNameWithVersion,\n                context: INTERNAL_CONTEXT_COLLECTION,\n                data: {\n                    name: collectionName as any,\n                    schemaHash: schema.hash,\n                    schema: schema.jsonSchema,\n                    version: schema.version,\n                    connectedStorages: []\n                },\n                _deleted: false,\n                _meta: getDefaultRxDocumentMeta(),\n                _rev: getDefaultRevision(),\n                _attachments: {}\n            };\n            bulkPutDocs.push({\n                document: collectionDocData\n            });\n\n            const useArgs: any = Object.assign(\n                {},\n                args,\n                {\n                    name: collectionName,\n                    schema,\n                    database: this\n                }\n            );\n\n            // run hooks\n            const hookData: RxCollectionCreator<any> & { name: string; } = flatClone(args) as any;\n            (hookData as any).database = this;\n            hookData.name = name;\n            runPluginHooks('preCreateRxCollection', hookData);\n            useArgs.conflictHandler = hookData.conflictHandler;\n\n            useArgsByCollectionName[collectionName] = useArgs;\n        });\n\n        const putDocsResult = await this.internalStore.bulkWrite(\n            bulkPutDocs,\n            'rx-database-add-collection'\n        );\n\n        await ensureNoStartupErrors(this);\n\n        Object.entries(putDocsResult.error).forEach(([_id, error]) => {\n            if (error.status !== 409) {\n                throw newRxError('DB12', {\n                    database: this.name,\n                    writeError: error\n                });\n            }\n            const docInDb: RxDocumentData<InternalStoreCollectionDocType> = ensureNotFalsy(error.documentInDb);\n            const collectionName = docInDb.data.name;\n            const schema = (schemas as any)[collectionName];\n            // collection already exists but has different schema\n            if (docInDb.data.schemaHash !== schema.hash) {\n                throw newRxError('DB6', {\n                    database: this.name,\n                    collection: collectionName,\n                    previousSchemaHash: docInDb.data.schemaHash,\n                    schemaHash: schema.hash,\n                    previousSchema: docInDb.data.schema,\n                    schema: ensureNotFalsy((jsonSchemas as any)[collectionName])\n                });\n            }\n        });\n\n        const ret: { [key in keyof CreatedCollections]: RxCollection } = {} as any;\n        await Promise.all(\n            Object.keys(collectionCreators).map(async (collectionName) => {\n                const useArgs = useArgsByCollectionName[collectionName];\n                const collection = await createRxCollection(useArgs);\n                (ret as any)[collectionName] = collection;\n\n                // set as getter to the database\n                (this.collections as any)[collectionName] = collection;\n                if (!(this as any)[collectionName]) {\n                    Object.defineProperty(this, collectionName, {\n                        get: () => (this.collections as any)[collectionName]\n                    });\n                }\n            })\n        );\n\n        return ret;\n    }\n\n    /**\n     * runs the given function between idleQueue-locking\n     */\n    lockedRun<T>(fn: (...args: any[]) => T): T extends Promise<any> ? T : Promise<T> {\n        return this.idleQueue.wrapCall(fn) as any;\n    }\n\n    requestIdlePromise() {\n        return this.idleQueue.requestIdlePromise();\n    }\n\n    /**\n     * Export database to a JSON friendly format.\n     */\n    exportJSON(_collections?: string[]): Promise<RxDumpDatabase<Collections>>;\n    exportJSON(_collections?: string[]): Promise<RxDumpDatabaseAny<Collections>>;\n    exportJSON(_collections?: string[]): Promise<any> {\n        throw pluginMissing('json-dump');\n    }\n\n    /**\n     * Import the parsed JSON export into the collection.\n     * @param _exportedJSON The previously exported data from the `<db>.exportJSON()` method.\n     * @note When an interface is loaded in this collection all base properties of the type are typed as `any`\n     * since data could be encrypted.\n     */\n    importJSON(_exportedJSON: RxDumpDatabaseAny<Collections>): Promise<void> {\n        throw pluginMissing('json-dump');\n    }\n\n    backup(_options: BackupOptions): RxBackupState {\n        throw pluginMissing('backup');\n    }\n\n    public leaderElector(): LeaderElector {\n        throw pluginMissing('leader-election');\n    }\n\n    public isLeader(): boolean {\n        throw pluginMissing('leader-election');\n    }\n    /**\n     * returns a promise which resolves when the instance becomes leader\n     */\n    public waitForLeadership(): Promise<boolean> {\n        throw pluginMissing('leader-election');\n    }\n\n    public migrationStates(): Observable<AllMigrationStates> {\n        throw pluginMissing('migration');\n    }\n\n    /**\n     * destroys the database-instance and all collections\n     */\n    public async destroy(): Promise<boolean> {\n        if (this.destroyed) {\n            return PROMISE_RESOLVE_FALSE;\n        }\n\n        // settings destroyed = true must be the first thing to do.\n        this.destroyed = true;\n\n        await runAsyncPluginHooks('preDestroyRxDatabase', this);\n        /**\n         * Complete the event stream\n         * to stop all subscribers who forgot to unsubscribe.\n         */\n        this.eventBulks$.complete();\n\n        DB_COUNT--;\n        this._subs.map(sub => sub.unsubscribe());\n\n        /**\n         * Destroying the pseudo instance will throw\n         * because stuff is missing\n         * TODO we should not need the pseudo instance on runtime.\n         * we should generate the property list on build time.\n         */\n        if (this.name === 'pseudoInstance') {\n            return PROMISE_RESOLVE_FALSE;\n        }\n\n        /**\n         * First wait until the database is idle\n         */\n        return this.requestIdlePromise()\n            .then(() => Promise.all(this.onDestroy.map(fn => fn())))\n            // destroy all collections\n            .then(() => Promise.all(\n                Object.keys(this.collections as any)\n                    .map(key => (this.collections as any)[key])\n                    .map(col => col.destroy())\n            ))\n            // destroy internal storage instances\n            .then(() => this.internalStore.close())\n            // remove combination from USED_COMBINATIONS-map\n            .then(() => USED_DATABASE_NAMES.delete(this.name))\n            .then(() => true);\n    }\n\n    /**\n     * deletes the database and its stored data.\n     * Returns the names of all removed collections.\n     */\n    remove(): Promise<string[]> {\n        return this\n            .destroy()\n            .then(() => removeRxDatabase(this.name, this.storage));\n    }\n\n    get asRxDatabase(): RxDatabase<\n        {},\n        Internals,\n        InstanceCreationOptions\n    > {\n        return this as any;\n    }\n}\n\n/**\n * checks if an instance with same name and adapter already exists\n * @throws {RxError} if used\n */\nfunction throwIfDatabaseNameUsed(\n    name: string\n) {\n    if (!USED_DATABASE_NAMES.has(name)) {\n        return;\n    } else {\n        throw newRxError('DB8', {\n            name,\n            link: 'https://pubkey.github.io/rxdb/rx-database.html#ignoreduplicate'\n        });\n    }\n}\n\n/**\n * Creates the storage instances that are used internally in the database\n * to store schemas and other configuration stuff.\n */\nexport async function createRxDatabaseStorageInstance<Internals, InstanceCreationOptions>(\n    databaseInstanceToken: string,\n    storage: RxStorage<Internals, InstanceCreationOptions>,\n    databaseName: string,\n    options: InstanceCreationOptions,\n    multiInstance: boolean,\n    password?: string\n): Promise<RxStorageInstance<InternalStoreDocType, Internals, InstanceCreationOptions>> {\n    const internalStore = await storage.createStorageInstance<InternalStoreDocType>(\n        {\n            databaseInstanceToken,\n            databaseName,\n            collectionName: INTERNAL_STORAGE_NAME,\n            schema: INTERNAL_STORE_SCHEMA,\n            options,\n            multiInstance,\n            password,\n            devMode: overwritable.isDevMode()\n        }\n    );\n    return internalStore;\n}\n\nexport function createRxDatabase<\n    Collections = { [key: string]: RxCollection; },\n    Internals = any,\n    InstanceCreationOptions = any\n>(\n    {\n        storage,\n        instanceCreationOptions,\n        name,\n        password,\n        multiInstance = true,\n        eventReduce = false,\n        ignoreDuplicate = false,\n        options = {},\n        cleanupPolicy,\n        allowSlowCount = false,\n        localDocuments = false,\n        hashFunction = defaultHashSha256\n    }: RxDatabaseCreator<Internals, InstanceCreationOptions>\n): Promise<\n    RxDatabase<Collections, Internals, InstanceCreationOptions>\n> {\n    runPluginHooks('preCreateRxDatabase', {\n        storage,\n        instanceCreationOptions,\n        name,\n        password,\n        multiInstance,\n        eventReduce,\n        ignoreDuplicate,\n        options,\n        localDocuments\n    });\n    // check if combination already used\n    if (!ignoreDuplicate) {\n        throwIfDatabaseNameUsed(name);\n    }\n    USED_DATABASE_NAMES.add(name);\n\n    const databaseInstanceToken = randomCouchString(10);\n\n    return createRxDatabaseStorageInstance<\n        Internals,\n        InstanceCreationOptions\n    >(\n        databaseInstanceToken,\n        storage,\n        name,\n        instanceCreationOptions as any,\n        multiInstance,\n        password\n    )\n        /**\n         * Creating the internal store might fail\n         * if some RxStorage wrapper is used that does some checks\n         * and then throw.\n         * In that case we have to properly clean up the database.\n         */\n        .catch(err => {\n            USED_DATABASE_NAMES.delete(name);\n            throw err;\n        })\n        .then(storageInstance => {\n            const rxDatabase: RxDatabase<Collections> = new RxDatabaseBase(\n                name,\n                databaseInstanceToken,\n                storage,\n                instanceCreationOptions,\n                password,\n                multiInstance,\n                eventReduce,\n                options,\n                storageInstance,\n                hashFunction,\n                cleanupPolicy,\n                allowSlowCount\n            ) as any;\n\n            return runAsyncPluginHooks('createRxDatabase', {\n                database: rxDatabase,\n                creator: {\n                    storage,\n                    instanceCreationOptions,\n                    name,\n                    password,\n                    multiInstance,\n                    eventReduce,\n                    ignoreDuplicate,\n                    options,\n                    localDocuments\n                }\n            }).then(() => rxDatabase);\n        });\n}\n\n/**\n * Removes the database and all its known data\n * with all known collections and all internal meta data.\n *\n * Returns the names of the removed collections.\n */\nexport async function removeRxDatabase(\n    databaseName: string,\n    storage: RxStorage<any, any>\n): Promise<string[]> {\n    const databaseInstanceToken = randomCouchString(10);\n    const dbInternalsStorageInstance = await createRxDatabaseStorageInstance(\n        databaseInstanceToken,\n        storage,\n        databaseName,\n        {},\n        false\n    );\n\n    const collectionDocs = await getAllCollectionDocuments(\n        storage.statics,\n        dbInternalsStorageInstance\n    );\n\n    const collectionNames = new Set<string>();\n    collectionDocs.forEach(doc => collectionNames.add(doc.data.name));\n    const removedCollectionNames: string[] = Array.from(collectionNames);\n\n    await Promise.all(\n        removedCollectionNames.map(collectionName => removeCollectionStorages(\n            storage,\n            dbInternalsStorageInstance,\n            databaseInstanceToken,\n            databaseName,\n            collectionName\n        ))\n    );\n\n    await runAsyncPluginHooks('postRemoveRxDatabase', {\n        databaseName,\n        storage\n    });\n\n    await dbInternalsStorageInstance.remove();\n    return removedCollectionNames;\n}\n\nexport function isRxDatabase(obj: any) {\n    return obj instanceof RxDatabaseBase;\n}\n\nexport function dbCount(): number {\n    return DB_COUNT;\n}\n\n\n/**\n * Returns true if the given RxDatabase was the first\n * instance that was created on the storage with this name.\n *\n * Can be used for some optimizations because on the first instantiation,\n * we can assume that no data was written before.\n */\nexport async function isRxDatabaseFirstTimeInstantiated(\n    database: RxDatabase\n): Promise<boolean> {\n    const tokenDoc = await database.storageTokenDocument;\n    return tokenDoc.data.instanceToken === database.token;\n}\n\n\n/**\n * For better performance some tasks run async\n * and are awaited later.\n * But we still have to ensure that there have been no errors\n * on database creation.\n */\nexport async function ensureNoStartupErrors(\n    rxDatabase: RxDatabaseBase<any, any, any>\n) {\n    await rxDatabase.storageToken;\n    if (rxDatabase.startupErrors[0]) {\n        throw rxDatabase.startupErrors[0];\n    }\n}\n"],"mappings":"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"}