{"version":3,"file":"rx-database.d.js","names":[],"sources":["../../../src/types/rx-database.d.ts"],"sourcesContent":["import {\n    MigrationState,\n    RxCollection,\n    RxDumpCollection,\n    RxDumpCollectionAsAny\n} from './rx-collection';\nimport {\n    RxDatabaseBase\n} from '../rx-database';\nimport { Observable } from 'rxjs';\nimport { RxStorage } from './rx-storage.interface';\nimport { RxLocalDocument } from './plugins/local-documents';\nimport { RxCleanupPolicy } from './plugins/cleanup';\nimport { HashFunction } from './util';\n\nexport interface RxDatabaseCreator<Internals = any, InstanceCreationOptions = any> {\n    storage: RxStorage<Internals, InstanceCreationOptions>;\n    instanceCreationOptions?: InstanceCreationOptions;\n    name: string;\n    password?: string | any;\n    multiInstance?: boolean;\n    eventReduce?: boolean;\n    ignoreDuplicate?: boolean;\n    options?: any;\n    cleanupPolicy?: Partial<RxCleanupPolicy>;\n    /**\n     * Set this to true if you want to store local documents\n     * in the RxDatabase instance.\n     */\n    localDocuments?: boolean;\n\n    /**\n     * Hash method used to hash strings and json-stringified objects.\n     * This hash does not have to be cryptographically secure,\n     * but it is very important that is does have not create\n     * collisions.\n     * Default is the sha256 from the ohash library\n     * @link https://www.npmjs.com/package/ohash\n     */\n    hashFunction?: HashFunction;\n\n    /**\n     * By default, count() queries in 'slow' mode are not allowed.\n     */\n    allowSlowCount?: boolean;\n}\n\nexport type CollectionsOfDatabase = { [key: string]: RxCollection; };\nexport type RxDatabase<\n    Collections = CollectionsOfDatabase,\n    Internals = any,\n    InstanceCreationOptions = any,\n> = RxDatabaseBase<\n    Internals,\n    InstanceCreationOptions,\n    Collections\n> &\n    Collections & RxDatabaseGenerated<Collections>;\n\nexport type AllMigrationStates = {\n    collection: RxCollection;\n    state: MigrationState;\n}[];\n\nexport interface RxLocalDocumentMutation<StorageType> {\n    insertLocal<LocalDocType = any>(id: string, data: LocalDocType): Promise<\n        RxLocalDocument<StorageType, LocalDocType>\n    >;\n    upsertLocal<LocalDocType = any>(id: string, data: LocalDocType): Promise<\n        RxLocalDocument<StorageType, LocalDocType>\n    >;\n    getLocal<LocalDocType = any>(id: string): Promise<\n        RxLocalDocument<StorageType, LocalDocType> | null\n    >;\n    getLocal$<LocalDocType = any>(id: string): Observable<\n        RxLocalDocument<StorageType, LocalDocType> | null\n    >;\n}\n\nexport interface RxDatabaseGenerated<Collections> extends RxLocalDocumentMutation<RxDatabase<Collections>> { }\n\n/**\n * Extract the **DocumentType** of a collection.\n */\ntype ExtractDTcol<P> = P extends RxCollection<infer T> ? T : { [prop: string]: any; };\n\ninterface RxDumpDatabaseBase {\n    instanceToken: string;\n    name: string;\n    passwordHash: string | null;\n}\nexport interface RxDumpDatabase<Col> extends RxDumpDatabaseBase {\n    collections: RxDumpCollection<ExtractDTcol<Col[keyof Col]>>[];\n}\n/**\n * All base properties are typed as any because they can be encrypted.\n */\nexport interface RxDumpDatabaseAny<Col> extends RxDumpDatabaseBase {\n    collections: RxDumpCollection<RxDumpCollectionAsAny<ExtractDTcol<Col[keyof Col]>>>[];\n}\n"],"mappings":""}