{"version":3,"file":"rx-database-internal-store.js","names":["isBulkWriteConflictError","newRxError","fillWithDefaultSettings","getComposedPrimaryKeyOfDocumentData","getSingleDocument","writeSingle","clone","ensureNotFalsy","getDefaultRevision","getDefaultRxDocumentMeta","randomCouchString","INTERNAL_CONTEXT_COLLECTION","INTERNAL_CONTEXT_STORAGE_TOKEN","INTERNAL_STORE_SCHEMA_TITLE","INTERNAL_STORE_SCHEMA","version","title","primaryKey","key","fields","separator","type","properties","id","maxLength","context","enum","data","additionalProperties","indexes","required","sharding","shards","mode","getPrimaryKeyOfInternalDocument","getAllCollectionDocuments","storageStatics","storageInstance","getAllQueryPrepared","prepareQuery","schema","selector","sort","skip","queryResult","query","allDocs","documents","STORAGE_TOKEN_DOCUMENT_KEY","STORAGE_TOKEN_DOCUMENT_ID","ensureStorageTokenDocumentExists","rxDatabase","storageToken","passwordHash","password","hashFunction","JSON","stringify","undefined","docData","token","instanceToken","_deleted","_meta","_rev","_attachments","writeResult","internalStore","bulkWrite","document","success","error","isError","status","conflictError","documentInDb","existingPasswordHash","storageTokenDocInDb","addConnectedStorageToCollection","collection","storageCollectionName","collectionNameWithVersion","_collectionNamePrimary","name","jsonSchema","collectionDocId","collectionDoc","database","saveData","connectedStorages","alreadyThere","find","row","collectionName","push","previous","err"],"sources":["../../src/rx-database-internal-store.ts"],"sourcesContent":["import {\n    isBulkWriteConflictError,\n    newRxError\n} from './rx-error';\nimport {\n    fillWithDefaultSettings,\n    getComposedPrimaryKeyOfDocumentData\n} from './rx-schema-helper';\nimport { getSingleDocument, writeSingle } from './rx-storage-helper';\nimport type {\n    CollectionsOfDatabase,\n    InternalStoreCollectionDocType,\n    InternalStoreDocType,\n    InternalStoreStorageTokenDocType,\n    RxCollection,\n    RxDatabase,\n    RxDocumentData,\n    RxJsonSchema,\n    RxStorageWriteError,\n    RxStorageInstance,\n    RxStorageStatics,\n    RxStorageWriteErrorConflict\n} from './types';\nimport {\n    clone,\n    ensureNotFalsy,\n    getDefaultRevision,\n    getDefaultRxDocumentMeta,\n    randomCouchString\n} from './plugins/utils';\n\nexport const INTERNAL_CONTEXT_COLLECTION = 'collection';\nexport const INTERNAL_CONTEXT_STORAGE_TOKEN = 'storage-token';\n\n/**\n * Do not change the title,\n * we have to flag the internal schema so that\n * some RxStorage implementations are able\n * to detect if the created RxStorageInstance\n * is from the internals or not,\n * to do some optimizations in some cases.\n */\nexport const INTERNAL_STORE_SCHEMA_TITLE = 'RxInternalDocument';\n\nexport const INTERNAL_STORE_SCHEMA: RxJsonSchema<RxDocumentData<InternalStoreDocType<any>>> = fillWithDefaultSettings({\n    version: 0,\n    title: INTERNAL_STORE_SCHEMA_TITLE,\n    primaryKey: {\n        key: 'id',\n        fields: [\n            'context',\n            'key'\n        ],\n        separator: '|'\n    },\n    type: 'object',\n    properties: {\n        id: {\n            type: 'string',\n            maxLength: 200\n        },\n        key: {\n            type: 'string'\n        },\n        context: {\n            type: 'string',\n            enum: [\n                INTERNAL_CONTEXT_COLLECTION,\n                INTERNAL_CONTEXT_STORAGE_TOKEN,\n                'OTHER'\n            ]\n        },\n        data: {\n            type: 'object',\n            additionalProperties: true\n        }\n    },\n    indexes: [],\n    required: [\n        'key',\n        'context',\n        'data'\n    ],\n    additionalProperties: false,\n    /**\n     * If the sharding plugin is used,\n     * it must not shard on the internal RxStorageInstance\n     * because that one anyway has only a small amount of documents\n     * and also its creation is in the hot path of the initial page load,\n     * so we should spend less time creating multiple RxStorageInstances.\n     */\n    sharding: {\n        shards: 1,\n        mode: 'collection'\n    }\n});\n\n\nexport function getPrimaryKeyOfInternalDocument(\n    key: string,\n    context: string\n): string {\n    return getComposedPrimaryKeyOfDocumentData<InternalStoreDocType>(\n        INTERNAL_STORE_SCHEMA,\n        {\n            key,\n            context\n        }\n    );\n}\n\n/**\n * Returns all internal documents\n * with context 'collection'\n */\nexport async function getAllCollectionDocuments(\n    storageStatics: RxStorageStatics,\n    storageInstance: RxStorageInstance<InternalStoreDocType<any>, any, any>\n): Promise<RxDocumentData<InternalStoreCollectionDocType>[]> {\n    const getAllQueryPrepared = storageStatics.prepareQuery(\n        storageInstance.schema,\n        {\n            selector: {\n                context: INTERNAL_CONTEXT_COLLECTION\n            },\n            sort: [{ id: 'asc' }],\n            skip: 0\n        }\n    );\n    const queryResult = await storageInstance.query(getAllQueryPrepared);\n    const allDocs = queryResult.documents;\n    return allDocs;\n}\n\n/**\n * to not confuse multiInstance-messages with other databases that have the same\n * name and adapter, but do not share state with this one (for example in-memory-instances),\n * we set a storage-token and use it in the broadcast-channel\n */\nexport const STORAGE_TOKEN_DOCUMENT_KEY = 'storageToken';\n\nexport const STORAGE_TOKEN_DOCUMENT_ID = getPrimaryKeyOfInternalDocument(\n    STORAGE_TOKEN_DOCUMENT_KEY,\n    INTERNAL_CONTEXT_STORAGE_TOKEN\n);\n\nexport async function ensureStorageTokenDocumentExists<Collections extends CollectionsOfDatabase = any>(\n    rxDatabase: RxDatabase<Collections>\n): Promise<RxDocumentData<InternalStoreStorageTokenDocType>> {\n\n    /**\n     * To have less read-write cycles,\n     * we just try to insert a new document\n     * and only fetch the existing one if a conflict happened.\n     */\n    const storageToken = randomCouchString(10);\n\n    const passwordHash = rxDatabase.password ?\n        rxDatabase.hashFunction(JSON.stringify(rxDatabase.password)) :\n        undefined;\n\n    const docData: RxDocumentData<InternalStoreStorageTokenDocType> = {\n        id: STORAGE_TOKEN_DOCUMENT_ID,\n        context: INTERNAL_CONTEXT_STORAGE_TOKEN,\n        key: STORAGE_TOKEN_DOCUMENT_KEY,\n        data: {\n            token: storageToken,\n            /**\n             * We add the instance token here\n             * to be able to detect if a given RxDatabase instance\n             * is the first instance that was ever created\n             * or if databases have existed earlier on that storage\n             * with the same database name.\n             */\n            instanceToken: rxDatabase.token,\n            passwordHash\n        },\n        _deleted: false,\n        _meta: getDefaultRxDocumentMeta(),\n        _rev: getDefaultRevision(),\n        _attachments: {}\n    };\n\n    const writeResult = await rxDatabase.internalStore.bulkWrite(\n        [{ document: docData }],\n        'internal-add-storage-token'\n    );\n    if (writeResult.success[STORAGE_TOKEN_DOCUMENT_ID]) {\n        return writeResult.success[STORAGE_TOKEN_DOCUMENT_ID];\n    }\n\n    /**\n     * If we get a 409 error,\n     * it means another instance already inserted the storage token.\n     * So we get that token from the database and return that one.\n     */\n    const error = ensureNotFalsy(writeResult.error[STORAGE_TOKEN_DOCUMENT_ID]);\n    if (\n        error.isError &&\n        (error as RxStorageWriteError<InternalStoreStorageTokenDocType>).status === 409\n    ) {\n        const conflictError = (error as RxStorageWriteErrorConflict<InternalStoreStorageTokenDocType>);\n\n\n        if (\n            passwordHash &&\n            passwordHash !== conflictError.documentInDb.data.passwordHash\n        ) {\n            throw newRxError('DB1', {\n                passwordHash,\n                existingPasswordHash: conflictError.documentInDb.data.passwordHash\n            });\n        }\n\n        const storageTokenDocInDb = conflictError.documentInDb;\n        return ensureNotFalsy(storageTokenDocInDb);\n    }\n    throw error;\n}\n\n\n\n\n\nexport async function addConnectedStorageToCollection(\n    collection: RxCollection<any>,\n    storageCollectionName: string,\n    schema: RxJsonSchema<any>\n) {\n    const collectionNameWithVersion = _collectionNamePrimary(collection.name, collection.schema.jsonSchema);\n    const collectionDocId = getPrimaryKeyOfInternalDocument(\n        collectionNameWithVersion,\n        INTERNAL_CONTEXT_COLLECTION\n    );\n\n    while (true) {\n        const collectionDoc = await getSingleDocument(\n            collection.database.internalStore,\n            collectionDocId\n        );\n        const saveData: RxDocumentData<InternalStoreCollectionDocType> = clone(ensureNotFalsy(collectionDoc));\n        /**\n         * Add array if not exist for backwards compatibility\n         * TODO remove this in 2023\n         */\n        if (!saveData.data.connectedStorages) {\n            saveData.data.connectedStorages = [];\n        }\n\n        // do nothing if already in array\n        const alreadyThere = saveData.data.connectedStorages\n            .find(row => row.collectionName === storageCollectionName && row.schema.version === schema.version);\n        if (alreadyThere) {\n            return;\n        }\n\n        // otherwise add to array and save\n        saveData.data.connectedStorages.push({\n            collectionName: storageCollectionName,\n            schema\n        });\n        try {\n            await writeSingle(\n                collection.database.internalStore,\n                {\n                    previous: ensureNotFalsy(collectionDoc),\n                    document: saveData\n                },\n                'add-connected-storage-to-collection'\n            );\n        } catch (err) {\n            if (!isBulkWriteConflictError(err)) {\n                throw err;\n            }\n            // retry on conflict\n        }\n    }\n}\n\n\n/**\n * returns the primary for a given collection-data\n * used in the internal store of a RxDatabase\n */\nexport function _collectionNamePrimary(name: string, schema: RxJsonSchema<any>) {\n    return name + '-' + schema.version;\n}\n"],"mappings":"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"}