{"version":3,"file":"rx-storage-statics.js","names":["newRxError","getQueryPlan","DEFAULT_CHECKPOINT_SCHEMA","RxStorageDefaultStatics","prepareQuery","schema","mutateableQuery","sort","query","queryPlan","checkpointSchema"],"sources":["../../src/rx-storage-statics.ts"],"sourcesContent":["import type {\n    RxDocumentData,\n    RxJsonSchema,\n    RxStorageStatics,\n    FilledMangoQuery,\n    DefaultPreparedQuery} from './types';\nimport { newRxError } from './rx-error';\nimport { getQueryPlan } from './query-planner';\nimport { DEFAULT_CHECKPOINT_SCHEMA } from './rx-schema-helper';\n\n\n/**\n * Most RxStorage implementations use these static functions.\n * But you can use anything that implements the interface,\n * for example if your underlying database already has a query engine.\n */\nexport const RxStorageDefaultStatics: RxStorageStatics = {\n    prepareQuery<RxDocType>(\n        schema: RxJsonSchema<RxDocumentData<RxDocType>>,\n        mutateableQuery: FilledMangoQuery<RxDocType>\n    ): DefaultPreparedQuery<RxDocType> {\n\n        if (!mutateableQuery.sort) {\n            throw newRxError('SNH', {\n                query: mutateableQuery\n            });\n        }\n\n        /**\n         * Store the query plan together with the\n         * prepared query to save performance.\n         */\n        const queryPlan = getQueryPlan(\n            schema,\n            mutateableQuery\n        );\n\n        return {\n            query: mutateableQuery,\n            queryPlan\n        };\n    },\n    checkpointSchema: DEFAULT_CHECKPOINT_SCHEMA\n\n};\n"],"mappings":"AAMA,SAASA,UAAU,QAAQ,YAAY;AACvC,SAASC,YAAY,QAAQ,iBAAiB;AAC9C,SAASC,yBAAyB,QAAQ,oBAAoB;;AAG9D;AACA;AACA;AACA;AACA;AACA,OAAO,IAAMC,uBAAyC,GAAG;EACrDC,YAAYA,CACRC,MAA+C,EAC/CC,eAA4C,EACb;IAE/B,IAAI,CAACA,eAAe,CAACC,IAAI,EAAE;MACvB,MAAMP,UAAU,CAAC,KAAK,EAAE;QACpBQ,KAAK,EAAEF;MACX,CAAC,CAAC;IACN;;IAEA;AACR;AACA;AACA;IACQ,IAAMG,SAAS,GAAGR,YAAY,CAC1BI,MAAM,EACNC,eAAe,CAClB;IAED,OAAO;MACHE,KAAK,EAAEF,eAAe;MACtBG;IACJ,CAAC;EACL,CAAC;EACDC,gBAAgB,EAAER;AAEtB,CAAC"}