{"version":3,"file":"p2p-types.js","names":[],"sources":["../../../../src/plugins/replication-p2p/p2p-types.ts"],"sourcesContent":["import { Observable, Subscription } from 'rxjs';\nimport type {\n    ReplicationOptions,\n    ReplicationPullOptions,\n    ReplicationPushOptions,\n    RxError,\n    RxReplicationHandler,\n    RxStorageDefaultCheckpoint,\n    RxTypeError,\n    StringKeys\n} from '../../types';\nimport { RxReplicationState } from '../replication';\nimport { WebsocketMessageResponseType, WebsocketMessageType } from '../replication-websocket';\n\nexport type P2PPeer = {\n    id: string;\n};\nexport type P2PReplicationCheckpoint = RxStorageDefaultCheckpoint;\n\n\nexport type P2PMessage = Omit<WebsocketMessageType, 'method' | 'collection'> & {\n    method: StringKeys<RxReplicationHandler<any, any>> | 'token';\n};\nexport type P2PResponse = Omit<WebsocketMessageResponseType, 'collection'>;\nexport type PeerWithMessage = {\n    peer: P2PPeer;\n    message: P2PMessage;\n};\nexport type PeerWithResponse = {\n    peer: P2PPeer;\n    response: P2PResponse;\n};\n\nexport type P2PConnectionHandler = {\n    connect$: Observable<P2PPeer>;\n    disconnect$: Observable<P2PPeer>;\n    message$: Observable<PeerWithMessage>;\n    response$: Observable<PeerWithResponse>;\n    error$: Observable<RxError | RxTypeError>;\n    send(peer: P2PPeer, message: P2PMessage | P2PResponse): Promise<void>;\n    destroy(): Promise<void>;\n};\n\nexport type P2PConnectionHandlerCreator = (\n    opts: SyncOptionsP2P<any>\n) => P2PConnectionHandler;\n\nexport type P2PSyncPushOptions<RxDocType> = Omit<\nReplicationPushOptions<RxDocType>,\n'handler'\n> & {};\n\nexport type P2PSyncPullOptions<RxDocType> = Omit<\nReplicationPullOptions<RxDocType, P2PReplicationCheckpoint>,\n'handler' | 'stream$'\n> & {};\n\nexport type SyncOptionsP2P<RxDocType> = Omit<\nReplicationOptions<RxDocType, P2PReplicationCheckpoint>,\n'pull' |\n'push' |\n'replicationIdentifier' |\n'deletedField' |\n'live' |\n'autostart' |\n'waitForLeadership'\n> & {\n    /**\n     * It will only replicate with other instances\n     * that use the same topic and\n     * are able to prove that they know the secret.\n     */\n    topic: string;\n    secret: string;\n    connectionHandlerCreator: P2PConnectionHandlerCreator;\n    pull?: P2PSyncPullOptions<RxDocType>;\n    push?: P2PSyncPushOptions<RxDocType>;\n};\n\nexport type RxP2PReplicationState<RxDocType> = RxReplicationState<RxDocType, P2PReplicationCheckpoint>;\n\n\nexport type P2PPeerState<RxDocType> = {\n    peer: P2PPeer;\n    // only exists when the peer was picked as master and the own client was picked as fork.\n    replicationState?: RxP2PReplicationState<RxDocType>;\n    // clean this up when removing the peer\n    subs: Subscription[];\n};\n"],"mappings":""}