{"version":3,"file":"foundationdb-query.js","names":["_customIndex","require","_utils","_foundationdbHelpers","_rxQueryHelper","queryFoundationDB","instance","preparedQuery","queryPlan","query","skip","limit","Infinity","skipPlusLimit","queryPlanFields","index","mustManuallyResort","sortFieldsSameAsIndexFields","queryMatcher","selectorSatisfiedByIndex","getQueryMatcher","schema","dbs","internals","dbsPromise","indexForName","slice","unshift","indexName","getFoundationDBIndexName","indexDB","ensureNotFalsy","indexes","db","lowerBound","startKeys","concat","lowerBoundString","getStartIndexStringFromLowerBound","inclusiveStart","upperBound","endKeys","upperBoundString","getStartIndexStringFromUpperBound","inclusiveEnd","result","root","doTransaction","tx","innerResult","indexTx","at","subspace","mainTx","main","range","getRangeBatch","done","next","docIds","value","map","row","docsData","Promise","all","docId","get","forEach","docData","push","length","return","sortComparator","getSortComparator","sort","documents"],"sources":["../../../../src/plugins/storage-foundationdb/foundationdb-query.ts"],"sourcesContent":["import {\n    getStartIndexStringFromLowerBound,\n    getStartIndexStringFromUpperBound\n} from '../../custom-index';\nimport type {\n    QueryMatcher,\n    RxDocumentData,\n    RxStorageQueryResult\n} from '../../types';\nimport { ensureNotFalsy } from '../../plugins/utils';\nimport { getFoundationDBIndexName } from './foundationdb-helpers';\nimport type {\n    FoundationDBPreparedQuery\n} from './foundationdb-types';\nimport { RxStorageInstanceFoundationDB } from './rx-storage-instance-foundationdb';\nimport { getQueryMatcher, getSortComparator } from '../../rx-query-helper';\n\nexport async function queryFoundationDB<RxDocType>(\n    instance: RxStorageInstanceFoundationDB<RxDocType>,\n    preparedQuery: FoundationDBPreparedQuery<RxDocType>\n): Promise<RxStorageQueryResult<RxDocType>> {\n    const queryPlan = preparedQuery.queryPlan;\n    const query = preparedQuery.query;\n    const skip = query.skip ? query.skip : 0;\n    const limit = query.limit ? query.limit : Infinity;\n    const skipPlusLimit = skip + limit;\n    const queryPlanFields: string[] = queryPlan.index;\n    const mustManuallyResort = !queryPlan.sortFieldsSameAsIndexFields;\n\n\n    let queryMatcher: QueryMatcher<RxDocumentData<RxDocType>> | false = false;\n    if (!queryPlan.selectorSatisfiedByIndex) {\n        queryMatcher = getQueryMatcher(\n            instance.schema,\n            preparedQuery.query\n        );\n    }\n\n    const dbs = await instance.internals.dbsPromise;\n\n\n    const indexForName = queryPlanFields.slice(0);\n    indexForName.unshift('_deleted');\n    const indexName = getFoundationDBIndexName(indexForName);\n    const indexDB = ensureNotFalsy(dbs.indexes[indexName]).db;\n\n    let lowerBound: any[] = queryPlan.startKeys;\n    lowerBound = [false].concat(lowerBound);\n    const lowerBoundString = getStartIndexStringFromLowerBound(\n        instance.schema,\n        indexForName,\n        lowerBound,\n        queryPlan.inclusiveStart\n    );\n\n    let upperBound: any[] = queryPlan.endKeys;\n    upperBound = [false].concat(upperBound);\n    const upperBoundString = getStartIndexStringFromUpperBound(\n        instance.schema,\n        indexForName,\n        upperBound,\n        queryPlan.inclusiveEnd\n    );\n    let result = await dbs.root.doTransaction(async (tx: any) => {\n        const innerResult: RxDocumentData<RxDocType>[] = [];\n        const indexTx = tx.at(indexDB.subspace);\n        const mainTx = tx.at(dbs.main.subspace);\n\n        const range = indexTx.getRangeBatch(\n            lowerBoundString,\n            upperBoundString,\n            {\n                // TODO these options seem to be broken in the foundationdb node bindings\n                // limit: instance.settings.batchSize,\n                // streamingMode: StreamingMode.Exact\n            }\n        );\n        let done = false;\n        while (!done) {\n            const next = await range.next();\n            if (next.done) {\n                done = true;\n                break;\n            }\n            const docIds = next.value.map((row: string[]) => row[1]);\n            const docsData: RxDocumentData<RxDocType>[] = await Promise.all(docIds.map((docId: string) => mainTx.get(docId)));\n            docsData.forEach((docData) => {\n                if (!done) {\n                    if (!queryMatcher || queryMatcher(docData)) {\n                        innerResult.push(docData);\n                    }\n                }\n                if (\n                    !mustManuallyResort &&\n                    innerResult.length === skipPlusLimit\n                ) {\n                    done = true;\n                    range.return();\n                }\n            });\n        }\n        return innerResult;\n    });\n    if (mustManuallyResort) {\n        const sortComparator = getSortComparator(instance.schema, preparedQuery.query);\n        result = result.sort(sortComparator);\n    }\n\n    // apply skip and limit boundaries.\n    result = result.slice(skip, skipPlusLimit);\n\n    return {\n        documents: result\n    };\n}\n"],"mappings":"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"}