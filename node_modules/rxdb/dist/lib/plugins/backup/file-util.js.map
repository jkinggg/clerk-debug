{"version":3,"file":"file-util.js","names":["fs","_interopRequireWildcard","require","path","_utils","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","obj","__esModule","default","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","ensureFolderExists","folderPath","existsSync","mkdirSync","recursive","clearFolder","deleteFolder","rmdirSync","prepareFolders","database","options","directory","metaLoc","metaFileLocation","currentTime","now","metaData","createdAt","updatedAt","collectionStates","writeFileSync","JSON","stringify","keys","collections","forEach","collectionName","join","writeToFile","location","data","blobToString","Promise","res","rej","writeFile","err","writeJsonToFile","getMeta","loc","readFile","metaContent","parse","setMeta","meta","documentFolder","docId"],"sources":["../../../../src/plugins/backup/file-util.ts"],"sourcesContent":["import * as fs from 'fs';\nimport * as path from 'path';\nimport {\n    BackupMetaFileContent,\n    BackupOptions,\n    RxDatabase\n} from '../../types';\nimport { blobToString, now } from '../../plugins/utils';\n\n/**\n * ensure that the given folder exists\n */\nexport function ensureFolderExists(folderPath: string): void {\n    if (!fs.existsSync(folderPath)) {\n        fs.mkdirSync(folderPath, { recursive: true });\n    }\n}\n\n/**\n * deletes and recreates the folder\n */\nexport function clearFolder(folderPath: string): void {\n    deleteFolder(folderPath);\n    ensureFolderExists(folderPath);\n}\n\nexport function deleteFolder(folderPath: string): void {\n    // only remove if exists to not raise warning\n    if (fs.existsSync(folderPath)) {\n        fs.rmdirSync(folderPath, { recursive: true });\n    }\n}\n\nexport function prepareFolders(\n    database: RxDatabase,\n    options: BackupOptions\n) {\n    ensureFolderExists(options.directory);\n\n    const metaLoc = metaFileLocation(options);\n\n    if (!fs.existsSync(metaLoc)) {\n        const currentTime = now();\n        const metaData: BackupMetaFileContent = {\n            createdAt: currentTime,\n            updatedAt: currentTime,\n            collectionStates: {}\n        };\n        fs.writeFileSync(metaLoc, JSON.stringify(metaData), 'utf-8');\n    }\n\n    Object.keys(database.collections).forEach(collectionName => {\n        ensureFolderExists(\n            path.join(\n                options.directory,\n                collectionName\n            )\n        );\n    });\n}\n\nexport async function writeToFile(\n    location: string,\n    data: string | Blob\n): Promise<void> {\n    if (typeof data !== 'string') {\n        data = await blobToString(data);\n    }\n    return new Promise(function (res, rej) {\n        fs.writeFile(\n            location,\n            data as string,\n            'utf-8',\n            (err) => {\n                if (err) {\n                    rej(err);\n                } else {\n                    res();\n                }\n            }\n        );\n    });\n}\n\nexport function writeJsonToFile(\n    location: string,\n    data: any\n): Promise<void> {\n    return writeToFile(\n        location,\n        JSON.stringify(data)\n    );\n}\n\nexport function metaFileLocation(options: BackupOptions): string {\n    return path.join(\n        options.directory,\n        'backup_meta.json'\n    );\n}\n\nexport function getMeta(options: BackupOptions): Promise<BackupMetaFileContent> {\n    const loc = metaFileLocation(options);\n    return new Promise((res, rej) => {\n        fs.readFile(loc, 'utf-8', (err, data) => {\n            if (err) {\n                rej(err);\n            } else {\n                const metaContent = JSON.parse(data);\n                res(metaContent);\n            }\n        });\n    });\n}\n\nexport function setMeta(\n    options: BackupOptions,\n    meta: BackupMetaFileContent\n): Promise<void> {\n    const loc = metaFileLocation(options);\n    return writeJsonToFile(loc, meta);\n}\n\nexport function documentFolder(\n    options: BackupOptions,\n    docId: string\n): string {\n    return path.join(\n        options.directory,\n        docId\n    );\n}\n"],"mappings":"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"}