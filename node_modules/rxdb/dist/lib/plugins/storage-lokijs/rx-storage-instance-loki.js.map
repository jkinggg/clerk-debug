{"version":3,"file":"rx-storage-instance-loki.js","names":["_rxjs","require","_utils","_rxError","_lokijsHelper","_rxSchemaHelper","_rxStorageHelper","_rxStorageMultiinstance","instanceId","now","RxStorageInstanceLoki","databaseInstanceToken","storage","databaseName","collectionName","schema","internals","options","databaseSettings","changes$","Subject","closed","primaryPath","getPrimaryFieldOfPrimaryKey","primaryKey","OPEN_LOKIJS_STORAGE_INSTANCES","add","leaderElector","copiedSelf","bulkWrite","bind","changeStream","cleanup","close","query","count","findDocumentsById","conflictResultionTasks","getAttachmentData","getChangedDocumentsSince","remove","resolveConflictResultionTask","awaitLeadership","then","ensureNotFalsy","broadcastChannel","addEventListener","msg","handleRemoteRequest","_proto","prototype","documentWrites","context","length","newRxError","args","localState","mustUseLocalState","requestRemoteInstance","ret","success","error","docsInDb","Map","docsInDbWithLokiKey","forEach","writeRow","id","document","documentInDb","collection","by","set","stripLokiKey","categorized","categorizeBulkWriteRows","errors","bulkInsertDocs","docId","insert","flatClone","bulkUpdateDocs","documentInDbWithLokiKey","getFromMapOrThrow","writeDoc","Object","assign","$loki","update","databaseState","saveQueue","addWrite","eventBulk","events","lastState","newestRow","checkpoint","lwt","_meta","next","ids","deleted","_deleted","preparedQuery","selector","transformRegexToRegExp","chain","find","sort","getLokiSortComparator","skip","offset","limit","foundDocuments","data","map","lokiDoc","documents","result","mode","_documentId","_attachmentId","Error","sinceLwt","RX_META_LWT_MINIMUM","$gte","getSortDocumentsByLastWriteTimeComparator","changedDocs","first","shift","slice","lastDoc","lastOfArray","docData","asObservable","minimumDeletedTime","deleteAmountPerRun","maxDeletionTime","$lt","Promise","reject","complete","delete","dbState","getLokiDatabase","run","closeLokiCollections","database","removeCollection","name","_taskSolution","exports","createLokiLocalState","params","indices","indexes","idx","isMaybeReadonlyArray","push","lokiCollectionName","version","collectionOptions","unique","LOKIJS_COLLECTION_DEFAULT_OPTIONS","addCollection","collections","createLokiStorageInstance","broadcastChannelRefObject","multiInstance","getLokiLeaderElector","instance","addRxStorageMultiInstanceSupport","RX_STORAGE_NAME_LOKIJS","undefined","closeBefore","removeBroadcastChannelReference","removeBefore"],"sources":["../../../../src/plugins/storage-lokijs/rx-storage-instance-loki.ts"],"sourcesContent":["import {\n    Subject,\n    Observable\n} from 'rxjs';\nimport {\n    flatClone,\n    now,\n    ensureNotFalsy,\n    isMaybeReadonlyArray,\n    getFromMapOrThrow,\n    getSortDocumentsByLastWriteTimeComparator,\n    RX_META_LWT_MINIMUM,\n    lastOfArray\n} from '../utils';\nimport { newRxError } from '../../rx-error';\nimport type {\n    RxStorageInstance,\n    LokiSettings,\n    RxStorageChangeEvent,\n    RxDocumentData,\n    BulkWriteRow,\n    RxStorageBulkWriteResponse,\n    RxStorageQueryResult,\n    RxJsonSchema,\n    MangoQuery,\n    LokiStorageInternals,\n    RxStorageInstanceCreationParams,\n    LokiDatabaseSettings,\n    LokiLocalDatabaseState,\n    EventBulk,\n    StringKeys,\n    RxDocumentDataById,\n    DeepReadonly,\n    RxConflictResultionTask,\n    RxConflictResultionTaskSolution,\n    RxStorageDefaultCheckpoint,\n    RxStorageCountResult\n} from '../../types';\nimport {\n    closeLokiCollections,\n    getLokiDatabase,\n    OPEN_LOKIJS_STORAGE_INSTANCES,\n    LOKIJS_COLLECTION_DEFAULT_OPTIONS,\n    stripLokiKey,\n    getLokiSortComparator,\n    getLokiLeaderElector,\n    requestRemoteInstance,\n    mustUseLocalState,\n    handleRemoteRequest,\n    RX_STORAGE_NAME_LOKIJS,\n    transformRegexToRegExp\n} from './lokijs-helper';\nimport type {\n    Collection\n} from 'lokijs';\nimport type { RxStorageLoki } from './rx-storage-lokijs';\nimport { getPrimaryFieldOfPrimaryKey } from '../../rx-schema-helper';\nimport { categorizeBulkWriteRows } from '../../rx-storage-helper';\nimport { addRxStorageMultiInstanceSupport, removeBroadcastChannelReference } from '../../rx-storage-multiinstance';\n\nlet instanceId = now();\n\nexport class RxStorageInstanceLoki<RxDocType> implements RxStorageInstance<\n    RxDocType,\n    LokiStorageInternals,\n    LokiSettings,\n    RxStorageDefaultCheckpoint\n> {\n\n    public readonly primaryPath: StringKeys<RxDocumentData<RxDocType>>;\n    private changes$: Subject<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, RxStorageDefaultCheckpoint>> = new Subject();\n    public readonly instanceId = instanceId++;\n\n    public closed = false;\n\n    constructor(\n        public readonly databaseInstanceToken: string,\n        public readonly storage: RxStorageLoki,\n        public readonly databaseName: string,\n        public readonly collectionName: string,\n        public readonly schema: Readonly<RxJsonSchema<RxDocumentData<RxDocType>>>,\n        public readonly internals: LokiStorageInternals,\n        public readonly options: Readonly<LokiSettings>,\n        public readonly databaseSettings: LokiDatabaseSettings\n    ) {\n        this.primaryPath = getPrimaryFieldOfPrimaryKey(this.schema.primaryKey);\n        OPEN_LOKIJS_STORAGE_INSTANCES.add(this);\n        if (this.internals.leaderElector) {\n\n\n            /**\n             * To run handleRemoteRequest(),\n             * the instance will call its own methods.\n             * But these methods could have already been swapped out by a RxStorageWrapper\n             * so we must store the original methods here and use them instead.\n             */\n            const copiedSelf: RxStorageInstance<RxDocType, any, any> = {\n                bulkWrite: this.bulkWrite.bind(this),\n                changeStream: this.changeStream.bind(this),\n                cleanup: this.cleanup.bind(this),\n                close: this.close.bind(this),\n                query: this.query.bind(this),\n                count: this.count.bind(this),\n                findDocumentsById: this.findDocumentsById.bind(this),\n                collectionName: this.collectionName,\n                databaseName: this.databaseName,\n                conflictResultionTasks: this.conflictResultionTasks.bind(this),\n                getAttachmentData: this.getAttachmentData.bind(this),\n                getChangedDocumentsSince: this.getChangedDocumentsSince.bind(this),\n                internals: this.internals,\n                options: this.options,\n                remove: this.remove.bind(this),\n                resolveConflictResultionTask: this.resolveConflictResultionTask.bind(this),\n                schema: this.schema\n            };\n\n            this.internals.leaderElector.awaitLeadership().then(() => {\n                // this instance is leader now, so it has to reply to queries from other instances\n                ensureNotFalsy(this.internals.leaderElector).broadcastChannel\n                    .addEventListener('message', (msg) => handleRemoteRequest(copiedSelf as any, msg));\n            });\n        }\n    }\n\n    async bulkWrite(\n        documentWrites: BulkWriteRow<RxDocType>[],\n        context: string\n    ): Promise<RxStorageBulkWriteResponse<RxDocType>> {\n        if (documentWrites.length === 0) {\n            throw newRxError('P2', {\n                args: {\n                    documentWrites\n                }\n            });\n        }\n        const localState = await mustUseLocalState(this);\n        if (!localState) {\n            return requestRemoteInstance(this, 'bulkWrite', [documentWrites]);\n        }\n\n        const ret: RxStorageBulkWriteResponse<RxDocType> = {\n            success: {},\n            error: {}\n        };\n\n        const docsInDb: Map<RxDocumentData<RxDocType>[StringKeys<RxDocType>], RxDocumentData<RxDocType>> = new Map();\n        const docsInDbWithLokiKey: Map<\n            RxDocumentData<RxDocType>[StringKeys<RxDocType>],\n            RxDocumentData<RxDocType> & { $loki: number; }\n        > = new Map();\n        documentWrites.forEach(writeRow => {\n            const id = writeRow.document[this.primaryPath];\n            const documentInDb = localState.collection.by(this.primaryPath, id);\n            if (documentInDb) {\n                docsInDbWithLokiKey.set(id as any, documentInDb);\n                docsInDb.set(id as any, stripLokiKey(documentInDb));\n            }\n        });\n\n        const categorized = categorizeBulkWriteRows<RxDocType>(\n            this,\n            this.primaryPath as any,\n            docsInDb,\n            documentWrites,\n            context\n        );\n        ret.error = categorized.errors;\n\n        categorized.bulkInsertDocs.forEach(writeRow => {\n            const docId = writeRow.document[this.primaryPath];\n            localState.collection.insert(flatClone(writeRow.document));\n            ret.success[docId as any] = writeRow.document;\n        });\n        categorized.bulkUpdateDocs.forEach(writeRow => {\n            const docId = writeRow.document[this.primaryPath];\n            const documentInDbWithLokiKey = getFromMapOrThrow(docsInDbWithLokiKey, docId as any);\n            const writeDoc: any = Object.assign(\n                {},\n                writeRow.document,\n                {\n                    $loki: documentInDbWithLokiKey.$loki\n                }\n            );\n            localState.collection.update(writeDoc);\n            ret.success[docId as any] = writeRow.document;\n        });\n        localState.databaseState.saveQueue.addWrite();\n\n        if (categorized.eventBulk.events.length > 0) {\n            const lastState = ensureNotFalsy(categorized.newestRow).document;\n            categorized.eventBulk.checkpoint = {\n                id: lastState[this.primaryPath],\n                lwt: lastState._meta.lwt\n            };\n            this.changes$.next(categorized.eventBulk);\n        }\n\n        return ret;\n    }\n    async findDocumentsById(ids: string[], deleted: boolean): Promise<RxDocumentDataById<RxDocType>> {\n        const localState = await mustUseLocalState(this);\n        if (!localState) {\n            return requestRemoteInstance(this, 'findDocumentsById', [ids, deleted]);\n        }\n\n        const ret: RxDocumentDataById<RxDocType> = {};\n        ids.forEach(id => {\n            const documentInDb = localState.collection.by(this.primaryPath, id);\n            if (\n                documentInDb &&\n                (!documentInDb._deleted || deleted)\n            ) {\n                ret[id] = stripLokiKey(documentInDb);\n            }\n        });\n        return ret;\n    }\n    async query(preparedQuery: MangoQuery<RxDocType>): Promise<RxStorageQueryResult<RxDocType>> {\n        const localState = await mustUseLocalState(this);\n        if (!localState) {\n            return requestRemoteInstance(this, 'query', [preparedQuery]);\n        }\n\n        if (preparedQuery.selector) {\n            preparedQuery = flatClone(preparedQuery);\n            preparedQuery.selector = transformRegexToRegExp(preparedQuery.selector);\n        }\n\n        let query = localState.collection\n            .chain()\n            .find(preparedQuery.selector);\n\n        if (preparedQuery.sort) {\n            query = query.sort(getLokiSortComparator(this.schema, preparedQuery));\n        }\n\n        /**\n         * Offset must be used before limit in LokiJS\n         * @link https://github.com/techfort/LokiJS/issues/570\n         */\n        if (preparedQuery.skip) {\n            query = query.offset(preparedQuery.skip);\n        }\n\n        if (preparedQuery.limit) {\n            query = query.limit(preparedQuery.limit);\n        }\n\n        const foundDocuments = query.data().map(lokiDoc => stripLokiKey(lokiDoc));\n        return {\n            documents: foundDocuments\n        };\n    }\n    async count(\n        preparedQuery: MangoQuery<RxDocType>\n    ): Promise<RxStorageCountResult> {\n        const result = await this.query(preparedQuery);\n        return {\n            count: result.documents.length,\n            mode: 'fast'\n        };\n    }\n    getAttachmentData(_documentId: string, _attachmentId: string): Promise<string> {\n        throw new Error('Attachments are not implemented in the lokijs RxStorage. Make a pull request.');\n    }\n\n\n    async getChangedDocumentsSince(\n        limit: number,\n        checkpoint?: RxStorageDefaultCheckpoint | null\n    ): Promise<{\n        documents: RxDocumentData<RxDocType>[];\n        checkpoint: RxStorageDefaultCheckpoint;\n    }> {\n        const localState = await mustUseLocalState(this);\n        if (!localState) {\n            return requestRemoteInstance(this, 'getChangedDocumentsSince', [limit, checkpoint]);\n        }\n\n        const sinceLwt = checkpoint ? checkpoint.lwt : RX_META_LWT_MINIMUM;\n        const query = localState.collection\n            .chain()\n            .find({\n                '_meta.lwt': {\n                    $gte: sinceLwt\n                }\n            })\n            .sort(getSortDocumentsByLastWriteTimeComparator(this.primaryPath as any));\n        let changedDocs = query.data();\n\n        const first = changedDocs[0];\n        if (\n            checkpoint &&\n            first &&\n            first[this.primaryPath] === checkpoint.id &&\n            first._meta.lwt === checkpoint.lwt\n        ) {\n            changedDocs.shift();\n        }\n\n        changedDocs = changedDocs.slice(0, limit);\n        const lastDoc = lastOfArray(changedDocs);\n        return {\n            documents: changedDocs.map(docData => stripLokiKey(docData)),\n            checkpoint: lastDoc ? {\n                id: lastDoc[this.primaryPath],\n                lwt: lastDoc._meta.lwt\n            } : checkpoint ? checkpoint : {\n                id: '',\n                lwt: 0\n            }\n        };\n    }\n\n    changeStream(): Observable<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, RxStorageDefaultCheckpoint>> {\n        return this.changes$.asObservable();\n    }\n\n    async cleanup(minimumDeletedTime: number): Promise<boolean> {\n        const localState = await mustUseLocalState(this);\n        if (!localState) {\n            return requestRemoteInstance(this, 'cleanup', [minimumDeletedTime]);\n        }\n\n        const deleteAmountPerRun = 10;\n        const maxDeletionTime = now() - minimumDeletedTime;\n        const query = localState.collection\n            .chain()\n            .find({\n                _deleted: true,\n                '_meta.lwt': {\n                    $lt: maxDeletionTime\n                }\n            }).limit(deleteAmountPerRun);\n        const foundDocuments = query.data();\n        if (foundDocuments.length > 0) {\n            localState.collection.remove(foundDocuments);\n            localState.databaseState.saveQueue.addWrite();\n        }\n\n        return foundDocuments.length !== deleteAmountPerRun;\n    }\n\n    async close(): Promise<void> {\n        if (this.closed) {\n            return Promise.reject(new Error('already closed'));\n        }\n        this.closed = true;\n        this.changes$.complete();\n        OPEN_LOKIJS_STORAGE_INSTANCES.delete(this);\n\n        if (this.internals.localState) {\n            const localState = await this.internals.localState;\n            const dbState = await getLokiDatabase(\n                this.databaseName,\n                this.databaseSettings\n            );\n            await dbState.saveQueue.run();\n            await closeLokiCollections(\n                this.databaseName,\n                [\n                    localState.collection\n                ]\n            );\n        }\n    }\n    async remove(): Promise<void> {\n        const localState = await mustUseLocalState(this);\n        if (!localState) {\n            return requestRemoteInstance(this, 'remove', []);\n        }\n        localState.databaseState.database.removeCollection(localState.collection.name);\n        await localState.databaseState.saveQueue.run();\n        return this.close();\n    }\n\n    conflictResultionTasks(): Observable<RxConflictResultionTask<RxDocType>> {\n        return new Subject();\n    }\n    async resolveConflictResultionTask(_taskSolution: RxConflictResultionTaskSolution<RxDocType>): Promise<void> { }\n\n}\n\nexport async function createLokiLocalState<RxDocType>(\n    params: RxStorageInstanceCreationParams<RxDocType, LokiSettings>,\n    databaseSettings: LokiDatabaseSettings\n): Promise<LokiLocalDatabaseState> {\n    if (!params.options) {\n        params.options = {};\n    }\n\n    const databaseState = await getLokiDatabase(\n        params.databaseName,\n        databaseSettings\n    );\n\n    /**\n     * Construct loki indexes from RxJsonSchema indexes.\n     * TODO what about compound indexes? Are they possible in lokijs?\n     */\n    const indices: string[] = [];\n    if (params.schema.indexes) {\n        params.schema.indexes.forEach(idx => {\n            if (!isMaybeReadonlyArray(idx)) {\n                indices.push(idx);\n            }\n        });\n    }\n    /**\n     * LokiJS has no concept of custom primary key, they use a number-id that is generated.\n     * To be able to query fast by primary key, we always add an index to the primary.\n     */\n    const primaryKey = getPrimaryFieldOfPrimaryKey(params.schema.primaryKey);\n    indices.push(primaryKey as string);\n\n    const lokiCollectionName = params.collectionName + '-' + params.schema.version;\n    const collectionOptions: Partial<CollectionOptions<RxDocumentData<RxDocType>>> = Object.assign(\n        {},\n        lokiCollectionName,\n        {\n            indices: indices as string[],\n            unique: [primaryKey]\n        } as any,\n        LOKIJS_COLLECTION_DEFAULT_OPTIONS\n    );\n\n    const collection: Collection = databaseState.database.addCollection(\n        lokiCollectionName,\n        collectionOptions as any\n    );\n    databaseState.collections[params.collectionName] = collection;\n    const ret: LokiLocalDatabaseState = {\n        databaseState,\n        collection\n    };\n\n    return ret;\n}\n\n\nexport async function createLokiStorageInstance<RxDocType>(\n    storage: RxStorageLoki,\n    params: RxStorageInstanceCreationParams<RxDocType, LokiSettings>,\n    databaseSettings: LokiDatabaseSettings\n): Promise<RxStorageInstanceLoki<RxDocType>> {\n    const internals: LokiStorageInternals = {};\n\n    const broadcastChannelRefObject: DeepReadonly<any> = {};\n\n\n    if (params.multiInstance) {\n        const leaderElector = getLokiLeaderElector(\n            params.databaseInstanceToken,\n            broadcastChannelRefObject,\n            params.databaseName\n        );\n        internals.leaderElector = leaderElector;\n    } else {\n        // optimisation shortcut, directly create db is non multi instance.\n        internals.localState = createLokiLocalState(params, databaseSettings);\n        await internals.localState;\n    }\n\n    const instance = new RxStorageInstanceLoki(\n        params.databaseInstanceToken,\n        storage,\n        params.databaseName,\n        params.collectionName,\n        params.schema,\n        internals,\n        params.options,\n        databaseSettings\n    );\n\n    addRxStorageMultiInstanceSupport(\n        RX_STORAGE_NAME_LOKIJS,\n        params,\n        instance,\n        internals.leaderElector ? internals.leaderElector.broadcastChannel : undefined\n    );\n\n    if (params.multiInstance) {\n        /**\n         * Clean up the broadcast-channel reference on close()\n         */\n        const closeBefore = instance.close.bind(instance);\n        instance.close = function () {\n            removeBroadcastChannelReference(\n                params.databaseInstanceToken,\n                broadcastChannelRefObject\n            );\n            return closeBefore();\n        };\n        const removeBefore = instance.remove.bind(instance);\n        instance.remove = function () {\n            removeBroadcastChannelReference(\n                params.databaseInstanceToken,\n                broadcastChannelRefObject\n            );\n            return removeBefore();\n        };\n\n        /**\n         * Directly create the localState when/if the db becomes leader.\n         */\n        ensureNotFalsy(internals.leaderElector)\n            .awaitLeadership()\n            .then(() => {\n                if (!instance.closed) {\n                    mustUseLocalState(instance);\n                }\n            });\n    }\n\n\n    return instance;\n}\n"],"mappings":"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"}