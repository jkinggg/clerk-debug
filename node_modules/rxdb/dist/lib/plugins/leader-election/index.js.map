{"version":3,"file":"index.js","names":["_broadcastChannel","require","_rxStorageMultiinstance","_utils","LEADER_ELECTORS_OF_DB","WeakMap","LEADER_ELECTOR_BY_BROADCAST_CHANNEL","getLeaderElectorByBroadcastChannel","broadcastChannel","elector","get","createLeaderElection","set","getForDatabase","getBroadcastChannelReference","token","name","oldDestroy","destroy","bind","removeBroadcastChannelReference","leaderElector","isLeader","multiInstance","waitForLeadership","PROMISE_RESOLVE_TRUE","awaitLeadership","then","onDestroy","db","has","die","rxdb","exports","prototypes","RxDatabase","proto","RxDBLeaderElectionPlugin","hooks","preDestroyRxDatabase","after"],"sources":["../../../../src/plugins/leader-election/index.ts"],"sourcesContent":["/**\n * this plugin adds the leader-election-capabilities to rxdb\n */\n\nimport {\n    createLeaderElection,\n    LeaderElector,\n    BroadcastChannel\n} from 'broadcast-channel';\nimport {\n    getBroadcastChannelReference,\n    removeBroadcastChannelReference\n} from '../../rx-storage-multiinstance';\n\nimport type {\n    RxDatabase,\n    RxPlugin\n} from '../../types';\nimport { PROMISE_RESOLVE_TRUE } from '../utils';\n\nconst LEADER_ELECTORS_OF_DB: WeakMap<RxDatabase, LeaderElector> = new WeakMap();\nconst LEADER_ELECTOR_BY_BROADCAST_CHANNEL: WeakMap<BroadcastChannel, LeaderElector> = new WeakMap();\n\n\n/**\n * Returns the leader elector of a broadcast channel.\n * Used to ensure we reuse the same elector for the channel each time.\n */\nexport function getLeaderElectorByBroadcastChannel(broadcastChannel: BroadcastChannel): LeaderElector {\n    let elector = LEADER_ELECTOR_BY_BROADCAST_CHANNEL.get(broadcastChannel);\n    if (!elector) {\n        elector = createLeaderElection(broadcastChannel);\n        LEADER_ELECTOR_BY_BROADCAST_CHANNEL.set(broadcastChannel, elector);\n    }\n    return elector;\n}\n\n/**\n * @overwrites RxDatabase().leaderElector for caching\n */\nexport function getForDatabase(this: RxDatabase): LeaderElector {\n\n\n    const broadcastChannel = getBroadcastChannelReference(\n        this.token,\n        this.name,\n        this\n    );\n\n    /**\n     * Clean up the reference on RxDatabase.destroy()\n     */\n    const oldDestroy = this.destroy.bind(this);\n    this.destroy = function () {\n        removeBroadcastChannelReference(this.token, this);\n        return oldDestroy();\n    };\n\n\n    let elector = getLeaderElectorByBroadcastChannel(broadcastChannel);\n    if (!elector) {\n        elector = getLeaderElectorByBroadcastChannel(broadcastChannel);\n        LEADER_ELECTORS_OF_DB.set(\n            this,\n            elector\n        );\n    }\n\n    /**\n     * Overwrite for caching\n     */\n    this.leaderElector = () => elector;\n\n    return elector;\n}\n\nexport function isLeader(this: RxDatabase): boolean {\n    if (!this.multiInstance) {\n        return true;\n    }\n    return this.leaderElector().isLeader;\n}\n\nexport function waitForLeadership(this: RxDatabase): Promise<boolean> {\n    if (!this.multiInstance) {\n        return PROMISE_RESOLVE_TRUE;\n    } else {\n        return this.leaderElector()\n            .awaitLeadership()\n            .then(() => true);\n    }\n}\n\n/**\n * runs when the database gets destroyed\n */\nexport function onDestroy(db: RxDatabase) {\n    const has = LEADER_ELECTORS_OF_DB.get(db);\n    if (has) {\n        has.die();\n    }\n}\n\nexport const rxdb = true;\nexport const prototypes = {\n    RxDatabase: (proto: any) => {\n        proto.leaderElector = getForDatabase;\n        proto.isLeader = isLeader;\n        proto.waitForLeadership = waitForLeadership;\n    }\n};\n\nexport const RxDBLeaderElectionPlugin: RxPlugin = {\n    name: 'leader-election',\n    rxdb,\n    prototypes,\n    hooks: {\n        preDestroyRxDatabase: {\n            after: onDestroy\n        }\n    }\n};\n"],"mappings":";;;;;;;;;;;;AAIA,IAAAA,iBAAA,GAAAC,OAAA;AAKA,IAAAC,uBAAA,GAAAD,OAAA;AASA,IAAAE,MAAA,GAAAF,OAAA;AAlBA;AACA;AACA;;AAkBA,IAAMG,qBAAyD,GAAG,IAAIC,OAAO,EAAE;AAC/E,IAAMC,mCAA6E,GAAG,IAAID,OAAO,EAAE;;AAGnG;AACA;AACA;AACA;AACO,SAASE,kCAAkCA,CAACC,gBAAkC,EAAiB;EAClG,IAAIC,OAAO,GAAGH,mCAAmC,CAACI,GAAG,CAACF,gBAAgB,CAAC;EACvE,IAAI,CAACC,OAAO,EAAE;IACVA,OAAO,GAAG,IAAAE,sCAAoB,EAACH,gBAAgB,CAAC;IAChDF,mCAAmC,CAACM,GAAG,CAACJ,gBAAgB,EAAEC,OAAO,CAAC;EACtE;EACA,OAAOA,OAAO;AAClB;;AAEA;AACA;AACA;AACO,SAASI,cAAcA,CAAA,EAAkC;EAG5D,IAAML,gBAAgB,GAAG,IAAAM,oDAA4B,EACjD,IAAI,CAACC,KAAK,EACV,IAAI,CAACC,IAAI,EACT,IAAI,CACP;;EAED;AACJ;AACA;EACI,IAAMC,UAAU,GAAG,IAAI,CAACC,OAAO,CAACC,IAAI,CAAC,IAAI,CAAC;EAC1C,IAAI,CAACD,OAAO,GAAG,YAAY;IACvB,IAAAE,uDAA+B,EAAC,IAAI,CAACL,KAAK,EAAE,IAAI,CAAC;IACjD,OAAOE,UAAU,EAAE;EACvB,CAAC;EAGD,IAAIR,OAAO,GAAGF,kCAAkC,CAACC,gBAAgB,CAAC;EAClE,IAAI,CAACC,OAAO,EAAE;IACVA,OAAO,GAAGF,kCAAkC,CAACC,gBAAgB,CAAC;IAC9DJ,qBAAqB,CAACQ,GAAG,CACrB,IAAI,EACJH,OAAO,CACV;EACL;;EAEA;AACJ;AACA;EACI,IAAI,CAACY,aAAa,GAAG,MAAMZ,OAAO;EAElC,OAAOA,OAAO;AAClB;AAEO,SAASa,QAAQA,CAAA,EAA4B;EAChD,IAAI,CAAC,IAAI,CAACC,aAAa,EAAE;IACrB,OAAO,IAAI;EACf;EACA,OAAO,IAAI,CAACF,aAAa,EAAE,CAACC,QAAQ;AACxC;AAEO,SAASE,iBAAiBA,CAAA,EAAqC;EAClE,IAAI,CAAC,IAAI,CAACD,aAAa,EAAE;IACrB,OAAOE,2BAAoB;EAC/B,CAAC,MAAM;IACH,OAAO,IAAI,CAACJ,aAAa,EAAE,CACtBK,eAAe,EAAE,CACjBC,IAAI,CAAC,MAAM,IAAI,CAAC;EACzB;AACJ;;AAEA;AACA;AACA;AACO,SAASC,SAASA,CAACC,EAAc,EAAE;EACtC,IAAMC,GAAG,GAAG1B,qBAAqB,CAACM,GAAG,CAACmB,EAAE,CAAC;EACzC,IAAIC,GAAG,EAAE;IACLA,GAAG,CAACC,GAAG,EAAE;EACb;AACJ;AAEO,IAAMC,IAAI,GAAG,IAAI;AAACC,OAAA,CAAAD,IAAA,GAAAA,IAAA;AAClB,IAAME,UAAU,GAAG;EACtBC,UAAU,EAAGC,KAAU,IAAK;IACxBA,KAAK,CAACf,aAAa,GAAGR,cAAc;IACpCuB,KAAK,CAACd,QAAQ,GAAGA,QAAQ;IACzBc,KAAK,CAACZ,iBAAiB,GAAGA,iBAAiB;EAC/C;AACJ,CAAC;AAACS,OAAA,CAAAC,UAAA,GAAAA,UAAA;AAEK,IAAMG,wBAAkC,GAAG;EAC9CrB,IAAI,EAAE,iBAAiB;EACvBgB,IAAI;EACJE,UAAU;EACVI,KAAK,EAAE;IACHC,oBAAoB,EAAE;MAClBC,KAAK,EAAEZ;IACX;EACJ;AACJ,CAAC;AAACK,OAAA,CAAAI,wBAAA,GAAAA,wBAAA"}