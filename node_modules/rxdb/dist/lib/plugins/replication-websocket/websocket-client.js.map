{"version":3,"file":"websocket-client.js","names":["_replication","require","_reconnectingWebsocket","_interopRequireDefault","_isomorphicWs","_utils","_rxjs","_rxError","ensureIsWebsocket","w","is","CLOSING","console","dir","Error","WEBSOCKET_BY_CACHE_KEY","Map","exports","getWebSocket","url","databaseToken","cacheKey","has","get","IsomorphicWebSocket","wsClient","ReconnectingWebSocket","WebSocket","connected$","BehaviorSubject","openPromise","Promise","res","onopen","next","onclose","message$","Subject","onmessage","messageObj","message","JSON","parse","data","error$","onerror","err","emitError","newRxError","errors","toArray","map","er","errorToPlainJson","direction","socket","refCount","set","removeWebSocketRef","database","token","obj","getFromMapOrThrow","delete","complete","close","replicateWithWebsocketServer","options","socketState","collection","messages$","requestCounter","requestFlag","randomCouchString","getRequestId","count","replicationState","replicateRxCollection","replicationIdentifier","live","pull","batchSize","stream$","pipe","filter","msg","id","name","result","handler","lastPulledCheckpoint","requestId","request","method","params","send","stringify","firstValueFrom","push","docs","subscribe","subjects","error","isConnected","reSync","streamRequest","onDestroy"],"sources":["../../../../src/plugins/replication-websocket/websocket-client.ts"],"sourcesContent":["import { replicateRxCollection, RxReplicationState } from '../replication';\nimport {\n    WebsocketClientOptions,\n    WebsocketMessageType\n} from './websocket-types';\n\nimport ReconnectingWebSocket from 'reconnecting-websocket';\nimport IsomorphicWebSocket from 'isomorphic-ws';\nimport {\n    errorToPlainJson,\n    getFromMapOrThrow,\n    randomCouchString,\n    toArray\n} from '../../plugins/utils';\nimport {\n    filter,\n    map,\n    Subject,\n    firstValueFrom,\n    BehaviorSubject\n} from 'rxjs';\nimport {\n    RxDatabase,\n    RxError,\n    RxReplicationWriteToMasterRow\n} from '../../types';\nimport { newRxError } from '../../rx-error';\n\nexport type WebsocketWithRefCount = {\n    url: string;\n    socket: ReconnectingWebSocket;\n    refCount: number;\n    openPromise: Promise<void>;\n    connected$: BehaviorSubject<boolean>;\n    message$: Subject<any>;\n    error$: Subject<RxError>;\n};\n\n\n/**\n * Copied and adapter from the 'reconnecting-websocket' npm module.\n * Some bundlers have problems with bundling the isomorphic-ws plugin\n * so we directly check the correctness in RxDB to ensure that we can\n * throw a helpful error.\n */\nfunction ensureIsWebsocket(w: typeof IsomorphicWebSocket) {\n    const is = typeof w !== 'undefined' && !!w && w.CLOSING === 2;\n    if (!is) {\n        console.dir(w);\n        throw new Error('websocket not valid');\n    }\n}\n\n/**\n * Reuse the same socket even when multiple\n * collection replicate with the same server at once.\n */\nexport const WEBSOCKET_BY_CACHE_KEY: Map<string, WebsocketWithRefCount> = new Map();\nexport async function getWebSocket(\n    url: string,\n    /**\n     * The value of RxDatabase.token.\n     */\n    databaseToken: string\n): Promise<WebsocketWithRefCount> {\n    /**\n     * Also use the database token as cache-key\n     * to make it easier to test and debug\n     * multi-instance setups.\n     */\n    const cacheKey = url + '|||' + databaseToken;\n\n    let has = WEBSOCKET_BY_CACHE_KEY.get(cacheKey);\n    if (!has) {\n        ensureIsWebsocket(IsomorphicWebSocket);\n        const wsClient = new ReconnectingWebSocket(\n            url,\n            [],\n            {\n                WebSocket: IsomorphicWebSocket\n            }\n        );\n\n        const connected$ = new BehaviorSubject<boolean>(false);\n        const openPromise = new Promise<void>(res => {\n            wsClient.onopen = () => {\n                connected$.next(true);\n                res();\n            };\n        });\n        wsClient.onclose = () => {\n            connected$.next(false);\n        };\n\n        const message$ = new Subject<any>();\n        wsClient.onmessage = (messageObj) => {\n            const message = JSON.parse(messageObj.data);\n            message$.next(message);\n        };\n\n        const error$ = new Subject<any>();\n        wsClient.onerror = (err) => {\n            const emitError = newRxError('RC_STREAM', {\n                errors: toArray(err).map((er: any) => errorToPlainJson(er)),\n                direction: 'pull'\n            });\n            error$.next(emitError);\n        };\n\n\n        has = {\n            url,\n            socket: wsClient,\n            openPromise,\n            refCount: 1,\n            connected$,\n            message$,\n            error$\n        };\n        WEBSOCKET_BY_CACHE_KEY.set(cacheKey, has);\n    } else {\n        has.refCount = has.refCount + 1;\n    }\n\n\n    await has.openPromise;\n    return has;\n}\n\nexport function removeWebSocketRef(\n    url: string,\n    database: RxDatabase\n) {\n    const cacheKey = url + '|||' + database.token;\n    const obj = getFromMapOrThrow(WEBSOCKET_BY_CACHE_KEY, cacheKey);\n    obj.refCount = obj.refCount - 1;\n    if (obj.refCount === 0) {\n        WEBSOCKET_BY_CACHE_KEY.delete(cacheKey);\n        obj.connected$.complete();\n        obj.socket.close();\n    }\n}\n\n\n\nexport async function replicateWithWebsocketServer<RxDocType, CheckpointType>(\n    options: WebsocketClientOptions<RxDocType>\n): Promise<RxReplicationState<RxDocType, CheckpointType>> {\n    const socketState = await getWebSocket(options.url, options.collection.database.token);\n    const wsClient = socketState.socket;\n\n    const messages$ = socketState.message$;\n\n    let requestCounter = 0;\n    const requestFlag = randomCouchString(10);\n    function getRequestId() {\n        const count = requestCounter++;\n        return options.collection.database.token + '|' + requestFlag + '|' + count;\n    }\n    const replicationState = replicateRxCollection<RxDocType, CheckpointType>({\n        collection: options.collection,\n        replicationIdentifier: 'websocket-' + options.url,\n        live: options.live,\n        pull: {\n            batchSize: options.batchSize,\n            stream$: messages$.pipe(\n                filter(msg => msg.id === 'stream' && msg.collection === options.collection.name),\n                map(msg => msg.result)\n            ),\n            async handler(lastPulledCheckpoint: CheckpointType, batchSize: number) {\n                const requestId = getRequestId();\n                const request: WebsocketMessageType = {\n                    id: requestId,\n                    collection: options.collection.name,\n                    method: 'masterChangesSince',\n                    params: [lastPulledCheckpoint, batchSize]\n                };\n                wsClient.send(JSON.stringify(request));\n                const result = await firstValueFrom(\n                    messages$.pipe(\n                        filter(msg => msg.id === requestId),\n                        map(msg => msg.result)\n                    )\n                );\n                return result;\n            }\n        },\n        push: {\n            batchSize: options.batchSize,\n            handler(docs: RxReplicationWriteToMasterRow<RxDocType>[]) {\n                const requestId = getRequestId();\n                const request: WebsocketMessageType = {\n                    id: requestId,\n                    collection: options.collection.name,\n                    method: 'masterWrite',\n                    params: [docs]\n                };\n                wsClient.send(JSON.stringify(request));\n                return firstValueFrom(\n                    messages$.pipe(\n                        filter(msg => msg.id === requestId),\n                        map(msg => msg.result)\n                    )\n                );\n            }\n        }\n    });\n\n    socketState.error$.subscribe(err => replicationState.subjects.error.next(err));\n\n    socketState.connected$.subscribe(isConnected => {\n        if (isConnected) {\n            /**\n             * When the client goes offline and online again,\n             * we have to send a 'RESYNC' signal because the client\n             * might have missed out events while being offline.\n             */\n            replicationState.reSync();\n\n            /**\n             * Because reconnecting creates a new websocket-instance,\n             * we have to start the changestream from the remote again\n             * each time.\n             */\n            const streamRequest: WebsocketMessageType = {\n                id: 'stream',\n                collection: options.collection.name,\n                method: 'masterChangeStream$',\n                params: []\n            };\n            wsClient.send(JSON.stringify(streamRequest));\n        }\n    });\n\n    options.collection.onDestroy.push(() => removeWebSocketRef(options.url, options.collection.database));\n    return replicationState;\n}\n"],"mappings":"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"}