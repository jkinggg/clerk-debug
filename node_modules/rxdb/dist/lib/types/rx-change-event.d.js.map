{"version":3,"file":"rx-change-event.d.js","names":[],"sources":["../../../src/types/rx-change-event.d.ts"],"sourcesContent":["import {\n    EventBulk,\n    RxDocumentData\n} from './rx-storage';\n\n\nexport type RxChangeEventBase<RxDocType> = {\n    operation: 'INSERT' | 'UPDATE' | 'DELETE';\n\n    /**\n     * Unique identifier for the event.\n     * When another event with the same id appears, it will be skipped.\n     */\n    readonly eventId: string;\n    readonly documentId: string;\n\n    // optional, does not exist on changes to localdocs of the database\n    readonly collectionName?: string;\n\n    // true if the event is about a local document, false if not.\n    readonly isLocal: boolean;\n\n    /**\n     * Unix timestamp in milliseconds of when the operation was triggered\n     * and when it was finished.\n     * This is optional because we do not have this time\n     * for events that come from the internal storage instance changestream.\n     * TODO do we even need this values?\n     */\n    readonly startTime?: number;\n    readonly endTime?: number;\n\n    documentData: RxDocumentData<RxDocType>;\n};\n\nexport type RxChangeEventInsert<RxDocType> = RxChangeEventBase<RxDocType> & {\n    operation: 'INSERT';\n    previousDocumentData: undefined;\n};\n\nexport type RxChangeEventUpdate<RxDocType> = RxChangeEventBase<RxDocType> & {\n    operation: 'UPDATE';\n    previousDocumentData: RxDocumentData<RxDocType>;\n};\n\nexport type RxChangeEventDelete<RxDocType> = RxChangeEventBase<RxDocType> & {\n    operation: 'DELETE';\n    previousDocumentData: RxDocumentData<RxDocType>;\n};\n\nexport type RxChangeEvent<RxDocType> = RxChangeEventInsert<RxDocType> | RxChangeEventUpdate<RxDocType> | RxChangeEventDelete<RxDocType>;\n\n/**\n * Internally, all events are processed via bulks\n * to save performance when sending them over a transport layer\n * or de-duplicating them.\n */\nexport type RxChangeEventBulk<DocType> = EventBulk<RxChangeEvent<DocType>, any> & {\n    // optional, not given for changes to local documents of a RxDatabase.\n    collectionName?: string;\n    /**\n     * Token of the database instance that created the events.\n     * Used to determine if the events came from another instance over the BroadcastChannel.\n     */\n    databaseToken: string;\n    /**\n     * The storageToken of the RxDatabase that created the events.\n     * Used to ensure we do not process events of other RxDatabases.\n     */\n    storageToken: string;\n    /**\n     * If true, the events belong to some internal stuff like from plugins.\n     * Internal events are not emitted to the outside over the .$ Observables.\n     */\n    internal: boolean;\n};\n"],"mappings":""}