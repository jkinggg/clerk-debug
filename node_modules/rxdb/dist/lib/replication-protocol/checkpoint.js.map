{"version":3,"file":"checkpoint.js","names":["_rxSchemaHelper","require","_rxStorageHelper","_utils","getLastCheckpointDoc","state","direction","checkpointDocId","getComposedPrimaryKeyOfDocumentData","input","metaInstance","schema","isCheckpoint","itemId","checkpointResult","findDocumentsById","checkpointDoc","lastCheckpointDoc","data","undefined","setCheckpoint","checkpoint","previousCheckpointDoc","events","canceled","getValue","JSON","stringify","newDoc","id","_deleted","_attachments","_meta","getDefaultRxDocumentMeta","_rev","getDefaultRevision","stackCheckpoints","lwt","now","createRevision","identifier","result","bulkWrite","previous","document","success","getFromObjectOrThrow","error","status","ensureNotFalsy","documentInDb","getCheckpointKey","hash","hashFunction","forkInstance","databaseName","collectionName","join"],"sources":["../../../src/replication-protocol/checkpoint.ts"],"sourcesContent":["import { getComposedPrimaryKeyOfDocumentData } from '../rx-schema-helper';\nimport { stackCheckpoints } from '../rx-storage-helper';\nimport type {\n    RxDocumentData,\n    RxStorageInstanceReplicationInput,\n    RxStorageInstanceReplicationState,\n    RxStorageReplicationDirection,\n    RxStorageReplicationMeta\n} from '../types';\nimport {\n    createRevision,\n    ensureNotFalsy,\n    getDefaultRevision,\n    getDefaultRxDocumentMeta,\n    getFromObjectOrThrow,\n    now\n} from '../plugins/utils';\n\nexport async function getLastCheckpointDoc<RxDocType, CheckpointType>(\n    state: RxStorageInstanceReplicationState<RxDocType>,\n    direction: RxStorageReplicationDirection\n): Promise<undefined | CheckpointType> {\n    const checkpointDocId = getComposedPrimaryKeyOfDocumentData(\n        state.input.metaInstance.schema,\n        {\n            isCheckpoint: '1',\n            itemId: direction\n        }\n    );\n    const checkpointResult = await state.input.metaInstance.findDocumentsById(\n        [\n            checkpointDocId\n        ],\n        false\n    );\n\n    const checkpointDoc = checkpointResult[checkpointDocId];\n    state.lastCheckpointDoc[direction] = checkpointDoc;\n    if (checkpointDoc) {\n        return checkpointDoc.data;\n    } else {\n        return undefined;\n    }\n}\n\n\n/**\n * Sets the checkpoint,\n * automatically resolves conflicts that appear.\n */\nexport async function setCheckpoint<RxDocType, CheckpointType>(\n    state: RxStorageInstanceReplicationState<RxDocType>,\n    direction: RxStorageReplicationDirection,\n    checkpoint: CheckpointType\n) {\n    let previousCheckpointDoc = state.lastCheckpointDoc[direction];\n    if (\n        checkpoint &&\n        /**\n         * If the replication is already canceled,\n         * we do not write a checkpoint\n         * because that could mean we write a checkpoint\n         * for data that has been fetched from the master\n         * but not been written to the child.\n         */\n        !state.events.canceled.getValue() &&\n        /**\n         * Only write checkpoint if it is different from before\n         * to have less writes to the storage.\n         */\n        (\n            !previousCheckpointDoc ||\n            JSON.stringify(previousCheckpointDoc.data) !== JSON.stringify(checkpoint)\n        )\n    ) {\n        const newDoc: RxDocumentData<RxStorageReplicationMeta> = {\n            id: '',\n            isCheckpoint: '1',\n            itemId: direction,\n            _deleted: false,\n            _attachments: {},\n            data: checkpoint,\n            _meta: getDefaultRxDocumentMeta(),\n            _rev: getDefaultRevision()\n        };\n        newDoc.id = getComposedPrimaryKeyOfDocumentData(\n            state.input.metaInstance.schema,\n            newDoc\n        );\n        while (true) {\n            /**\n             * Instead of just storing the new checkpoint,\n             * we have to stack up the checkpoint with the previous one.\n             * This is required for plugins like the sharding RxStorage\n             * where the changeStream events only contain a Partial of the\n             * checkpoint.\n             */\n            if (previousCheckpointDoc) {\n                newDoc.data = stackCheckpoints([\n                    previousCheckpointDoc.data,\n                    newDoc.data\n                ]);\n            }\n            newDoc._meta.lwt = now();\n            newDoc._rev = createRevision(\n                state.input.identifier,\n                previousCheckpointDoc\n            );\n            const result = await state.input.metaInstance.bulkWrite([{\n                previous: previousCheckpointDoc,\n                document: newDoc\n            }], 'replication-set-checkpoint');\n\n            if (result.success[newDoc.id]) {\n                state.lastCheckpointDoc[direction] = getFromObjectOrThrow(\n                    result.success,\n                    newDoc.id\n                );\n                return;\n            } else {\n                const error = getFromObjectOrThrow(\n                    result.error,\n                    newDoc.id\n                );\n                if (error.status !== 409) {\n                    throw error;\n                } else {\n                    previousCheckpointDoc = ensureNotFalsy(error.documentInDb);\n                    newDoc._rev = createRevision(\n                        state.input.identifier,\n                        previousCheckpointDoc\n                    );\n                }\n            }\n        }\n    }\n}\n\nexport function getCheckpointKey<RxDocType>(\n    input: RxStorageInstanceReplicationInput<RxDocType>\n): string {\n    const hash = input.hashFunction([\n        input.identifier,\n        input.forkInstance.databaseName,\n        input.forkInstance.collectionName\n    ].join('||'));\n    return 'rx-storage-replication-' + hash;\n}\n"],"mappings":"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"}