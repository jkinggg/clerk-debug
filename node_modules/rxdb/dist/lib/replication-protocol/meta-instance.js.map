{"version":3,"file":"meta-instance.js","names":["_rxSchemaHelper","require","_rxStorageHelper","_utils","getRxReplicationMetaInstanceSchema","replicatedDocumentsSchema","encrypted","parentPrimaryKeyLength","getLengthOfPrimaryKey","baseSchema","primaryKey","key","fields","separator","type","version","additionalProperties","properties","id","minLength","maxLength","isCheckpoint","enum","itemId","data","isResolvedConflict","required","metaInstanceSchema","fillWithDefaultSettings","getAssumedMasterState","state","docIds","input","metaInstance","findDocumentsById","map","docId","useId","getComposedPrimaryKeyOfDocumentData","schema","then","metaDocs","ret","Object","values","forEach","metaDoc","docData","metaDocument","getMetaWriteRow","newMasterDocState","previous","primaryPath","newMeta","flatCloneDocWithMeta","_attachments","_deleted","_rev","getDefaultRevision","_meta","lwt","now","createRevision","identifier","document"],"sources":["../../../src/replication-protocol/meta-instance.ts"],"sourcesContent":["import {\n    fillWithDefaultSettings,\n    getComposedPrimaryKeyOfDocumentData,\n    getLengthOfPrimaryKey\n} from '../rx-schema-helper';\nimport { flatCloneDocWithMeta } from '../rx-storage-helper';\nimport type {\n    BulkWriteRow,\n    ById,\n    RxDocumentData,\n    RxJsonSchema,\n    RxStorageInstanceReplicationState,\n    RxStorageReplicationMeta,\n    WithDeleted\n} from '../types';\nimport { getDefaultRevision, createRevision, now } from '../plugins/utils';\n\n\nexport function getRxReplicationMetaInstanceSchema(\n    replicatedDocumentsSchema: RxJsonSchema<RxDocumentData<any>>,\n    encrypted: boolean\n): RxJsonSchema<RxDocumentData<RxStorageReplicationMeta>> {\n    const parentPrimaryKeyLength = getLengthOfPrimaryKey(replicatedDocumentsSchema);\n\n    const baseSchema: RxJsonSchema<RxStorageReplicationMeta> = {\n        primaryKey: {\n            key: 'id',\n            fields: [\n                'itemId',\n                'isCheckpoint'\n            ],\n            separator: '|'\n        },\n        type: 'object',\n        version: 0,\n        additionalProperties: false,\n        properties: {\n            id: {\n                type: 'string',\n                minLength: 1,\n                // add +1 for the '|' and +1 for the 'isCheckpoint' flag\n                maxLength: parentPrimaryKeyLength + 2\n            },\n            isCheckpoint: {\n                type: 'string',\n                enum: [\n                    '0',\n                    '1'\n                ],\n                minLength: 1,\n                maxLength: 1\n            },\n            itemId: {\n                type: 'string',\n                maxLength: parentPrimaryKeyLength\n            },\n            data: {\n                type: 'object',\n                additionalProperties: true\n            },\n            isResolvedConflict: {\n                type: 'string'\n            }\n        },\n        required: [\n            'id',\n            'isCheckpoint',\n            'itemId',\n            'data'\n        ]\n    };\n    if (encrypted) {\n        baseSchema.encrypted = ['data'];\n    }\n    const metaInstanceSchema: RxJsonSchema<RxDocumentData<RxStorageReplicationMeta>> = fillWithDefaultSettings(baseSchema);\n    return metaInstanceSchema;\n}\n\n\n\n/**\n * Returns the document states of what the fork instance\n * assumes to be the latest state on the master instance.\n */\nexport function getAssumedMasterState<RxDocType>(\n    state: RxStorageInstanceReplicationState<RxDocType>,\n    docIds: string[]\n): Promise<ById<{\n    docData: WithDeleted<RxDocType>;\n    metaDocument: RxDocumentData<RxStorageReplicationMeta>;\n}>> {\n    return state.input.metaInstance.findDocumentsById(\n        docIds.map(docId => {\n            const useId = getComposedPrimaryKeyOfDocumentData(\n                state.input.metaInstance.schema,\n                {\n                    itemId: docId,\n                    isCheckpoint: '0'\n                }\n            );\n            return useId;\n        }),\n        true\n    ).then(metaDocs => {\n        const ret: {\n            [docId: string]: {\n                docData: RxDocumentData<RxDocType>;\n                metaDocument: RxDocumentData<RxStorageReplicationMeta>;\n            };\n        } = {};\n        Object\n            .values(metaDocs)\n            .forEach((metaDoc) => {\n                ret[metaDoc.itemId] = {\n                    docData: metaDoc.data,\n                    metaDocument: metaDoc\n                };\n            });\n\n        return ret;\n    });\n}\n\n\nexport function getMetaWriteRow<RxDocType>(\n    state: RxStorageInstanceReplicationState<RxDocType>,\n    newMasterDocState: WithDeleted<RxDocType>,\n    previous?: RxDocumentData<RxStorageReplicationMeta>,\n    isResolvedConflict?: string\n): BulkWriteRow<RxStorageReplicationMeta> {\n    const docId: string = (newMasterDocState as any)[state.primaryPath];\n    const newMeta: RxDocumentData<RxStorageReplicationMeta> = previous ? flatCloneDocWithMeta(\n        previous\n    ) : {\n        id: '',\n        isCheckpoint: '0',\n        itemId: docId,\n        data: newMasterDocState,\n        _attachments: {},\n        _deleted: false,\n        _rev: getDefaultRevision(),\n        _meta: {\n            lwt: 0\n        }\n    };\n    newMeta.data = newMasterDocState;\n    newMeta.isResolvedConflict = isResolvedConflict;\n    newMeta._meta.lwt = now();\n    newMeta.id = getComposedPrimaryKeyOfDocumentData(\n        state.input.metaInstance.schema,\n        newMeta\n    );\n    newMeta._rev = createRevision(\n        state.input.identifier,\n        previous\n    );\n    return {\n        previous,\n        document: newMeta\n    };\n}\n"],"mappings":"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"}