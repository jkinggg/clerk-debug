{"version":3,"file":"index.js","names":["_rxjs","require","_rxSchemaHelper","_utils","_checkpoint","Object","keys","forEach","key","prototype","hasOwnProperty","call","_exportNames","exports","defineProperty","enumerable","get","_downstream","_helper","_upstream","_metaInstance","_conflicts","replicateRxStorageInstance","input","checkpointKey","getCheckpointKey","state","primaryPath","getPrimaryFieldOfPrimaryKey","forkInstance","schema","primaryKey","downstreamBulkWriteFlag","events","canceled","BehaviorSubject","active","down","up","processed","Subject","resolvedConflicts","error","stats","addNewTask","downstreamProcessChanges","downstreamResyncOnce","masterChangeStreamEmit","persistFromMaster","forkChangeStreamEmit","persistToMaster","persistToMasterConflictWrites","persistToMasterHadConflicts","processTasks","upstreamInitialSync","firstSyncDone","streamQueue","PROMISE_RESOLVE_VOID","checkpointQueue","lastCheckpointDoc","startReplicationDownstream","startReplicationUpstream","awaitRxStorageReplicationFirstInSync","firstValueFrom","combineLatest","pipe","filter","v","then","awaitRxStorageReplicationInSync","replicationState","Promise","all","awaitRxStorageReplicationIdle","rxStorageInstanceToReplicationHandler","instance","conflictHandler","databaseInstanceToken","replicationHandler","masterChangeStream$","changeStream","map","eventBulk","ret","checkpoint","documents","event","writeDocToDocState","ensureNotFalsy","documentData","masterChangesSince","batchSize","getChangedDocumentsSince","result","length","d","masterWrite","rows","rowById","row","docId","newDocumentState","ids","masterDocsState","findDocumentsById","conflicts","writeRows","entries","id","masterState","push","document","docStateToWriteDoc","assumedMasterState","realMasterState","isEqual","previous","bulkWrite","values","err","status","Error","documentInDb","cancelRxStorageReplication","next","complete"],"sources":["../../../src/replication-protocol/index.ts"],"sourcesContent":["/**\n * These files contain the replication protocol.\n * It can be used to replicated RxStorageInstances or RxCollections\n * or even to do a client(s)-server replication.\n */\n\n\nimport {\n    BehaviorSubject,\n    combineLatest,\n    filter,\n    firstValueFrom,\n    map,\n    Subject\n} from 'rxjs';\nimport {\n    getPrimaryFieldOfPrimaryKey\n} from '../rx-schema-helper';\nimport type {\n    BulkWriteRow,\n    ById,\n    DocumentsWithCheckpoint,\n    RxConflictHandler,\n    RxReplicationHandler,\n    RxReplicationWriteToMasterRow,\n    RxStorageInstance,\n    RxStorageInstanceReplicationInput,\n    RxStorageInstanceReplicationState,\n    WithDeleted\n} from '../types';\nimport {\n    ensureNotFalsy,\n    PROMISE_RESOLVE_VOID\n} from '../plugins/utils';\nimport {\n    getCheckpointKey\n} from './checkpoint';\nimport { startReplicationDownstream } from './downstream';\nimport { docStateToWriteDoc, writeDocToDocState } from './helper';\nimport { startReplicationUpstream } from './upstream';\n\n\nexport * from './checkpoint';\nexport * from './downstream';\nexport * from './upstream';\nexport * from './meta-instance';\nexport * from './conflicts';\nexport * from './helper';\n\n\nexport function replicateRxStorageInstance<RxDocType>(\n    input: RxStorageInstanceReplicationInput<RxDocType>\n): RxStorageInstanceReplicationState<RxDocType> {\n    const checkpointKey = getCheckpointKey(input);\n    const state: RxStorageInstanceReplicationState<RxDocType> = {\n        primaryPath: getPrimaryFieldOfPrimaryKey(input.forkInstance.schema.primaryKey),\n        input,\n        checkpointKey,\n        downstreamBulkWriteFlag: 'replication-downstream-' + checkpointKey,\n        events: {\n            canceled: new BehaviorSubject<boolean>(false),\n            active: {\n                down: new BehaviorSubject<boolean>(true),\n                up: new BehaviorSubject<boolean>(true)\n            },\n            processed: {\n                down: new Subject(),\n                up: new Subject()\n            },\n            resolvedConflicts: new Subject(),\n            error: new Subject()\n        },\n        stats: {\n            down: {\n                addNewTask: 0,\n                downstreamProcessChanges: 0,\n                downstreamResyncOnce: 0,\n                masterChangeStreamEmit: 0,\n                persistFromMaster: 0\n            },\n            up: {\n                forkChangeStreamEmit: 0,\n                persistToMaster: 0,\n                persistToMasterConflictWrites: 0,\n                persistToMasterHadConflicts: 0,\n                processTasks: 0,\n                upstreamInitialSync: 0\n            }\n        },\n        firstSyncDone: {\n            down: new BehaviorSubject<boolean>(false),\n            up: new BehaviorSubject<boolean>(false)\n        },\n        streamQueue: {\n            down: PROMISE_RESOLVE_VOID,\n            up: PROMISE_RESOLVE_VOID\n        },\n        checkpointQueue: PROMISE_RESOLVE_VOID,\n        lastCheckpointDoc: {}\n    };\n\n    startReplicationDownstream(state);\n    startReplicationUpstream(state);\n    return state;\n}\n\nexport function awaitRxStorageReplicationFirstInSync(\n    state: RxStorageInstanceReplicationState<any>\n): Promise<void> {\n    return firstValueFrom(\n        combineLatest([\n            state.firstSyncDone.down.pipe(\n                filter(v => !!v)\n            ),\n            state.firstSyncDone.up.pipe(\n                filter(v => !!v)\n            )\n        ])\n    ).then(() => { });\n}\n\nexport function awaitRxStorageReplicationInSync(\n    replicationState: RxStorageInstanceReplicationState<any>\n) {\n    return Promise.all([\n        replicationState.streamQueue.up,\n        replicationState.streamQueue.down,\n        replicationState.checkpointQueue\n    ]);\n}\n\n\nexport async function awaitRxStorageReplicationIdle(\n    state: RxStorageInstanceReplicationState<any>\n) {\n    await awaitRxStorageReplicationFirstInSync(state);\n    while (true) {\n        const { down, up } = state.streamQueue;\n        await Promise.all([\n            up,\n            down\n        ]);\n        /**\n         * If the Promises have not been reassigned\n         * after awaiting them, we know that the replication\n         * is in idle state at this point in time.\n         */\n        if (\n            down === state.streamQueue.down &&\n            up === state.streamQueue.up\n        ) {\n            return;\n        }\n    }\n}\n\n\nexport function rxStorageInstanceToReplicationHandler<RxDocType, MasterCheckpointType>(\n    instance: RxStorageInstance<RxDocType, any, any, MasterCheckpointType>,\n    conflictHandler: RxConflictHandler<RxDocType>,\n    databaseInstanceToken: string\n): RxReplicationHandler<RxDocType, MasterCheckpointType> {\n    const primaryPath = getPrimaryFieldOfPrimaryKey(instance.schema.primaryKey);\n    const replicationHandler: RxReplicationHandler<RxDocType, MasterCheckpointType> = {\n        masterChangeStream$: instance.changeStream().pipe(\n            map(eventBulk => {\n                const ret: DocumentsWithCheckpoint<RxDocType, MasterCheckpointType> = {\n                    checkpoint: eventBulk.checkpoint,\n                    documents: eventBulk.events.map(event => {\n                        return writeDocToDocState(ensureNotFalsy(event.documentData) as any);\n                    })\n                };\n                return ret;\n            })\n        ),\n        masterChangesSince(\n            checkpoint,\n            batchSize\n        ) {\n            return instance.getChangedDocumentsSince(\n                batchSize,\n                checkpoint\n            ).then(result => {\n                return {\n                    checkpoint: result.documents.length > 0 ? result.checkpoint : checkpoint,\n                    documents: result.documents.map(d => writeDocToDocState(d))\n                };\n            });\n        },\n        async masterWrite(\n            rows\n        ) {\n            const rowById: ById<RxReplicationWriteToMasterRow<RxDocType>> = {};\n            rows.forEach(row => {\n                const docId: string = (row.newDocumentState as any)[primaryPath];\n                rowById[docId] = row;\n            });\n            const ids = Object.keys(rowById);\n\n            const masterDocsState = await instance.findDocumentsById(\n                ids,\n                true\n            );\n            const conflicts: WithDeleted<RxDocType>[] = [];\n            const writeRows: BulkWriteRow<RxDocType>[] = [];\n            await Promise.all(\n                Object.entries(rowById)\n                    .map(async ([id, row]) => {\n                        const masterState = masterDocsState[id];\n                        if (!masterState) {\n                            writeRows.push({\n                                document: docStateToWriteDoc(databaseInstanceToken, row.newDocumentState)\n                            });\n                        } else if (\n                            masterState &&\n                            !row.assumedMasterState\n                        ) {\n                            conflicts.push(writeDocToDocState(masterState));\n                        } else if (\n                            (await conflictHandler({\n                                realMasterState: writeDocToDocState(masterState),\n                                newDocumentState: ensureNotFalsy(row.assumedMasterState)\n                            }, 'rxStorageInstanceToReplicationHandler-masterWrite')).isEqual === true\n                        ) {\n                            writeRows.push({\n                                previous: masterState,\n                                document: docStateToWriteDoc(databaseInstanceToken, row.newDocumentState, masterState)\n                            });\n                        } else {\n                            conflicts.push(writeDocToDocState(masterState));\n                        }\n                    })\n            );\n\n\n            if (writeRows.length > 0) {\n                const result = await instance.bulkWrite(\n                    writeRows,\n                    'replication-master-write'\n                );\n                Object\n                    .values(result.error)\n                    .forEach(err => {\n                        if (err.status !== 409) {\n                            throw new Error('non conflict error');\n                        } else {\n                            conflicts.push(\n                                writeDocToDocState(ensureNotFalsy(err.documentInDb))\n                            );\n                        }\n                    });\n            }\n            return conflicts;\n        }\n    };\n\n    return replicationHandler;\n}\n\n\nexport function cancelRxStorageReplication(\n    replicationState: RxStorageInstanceReplicationState<any>\n) {\n    replicationState.events.canceled.next(true);\n    replicationState.events.active.up.complete();\n    replicationState.events.active.down.complete();\n    replicationState.events.processed.up.complete();\n    replicationState.events.processed.down.complete();\n    replicationState.events.resolvedConflicts.complete();\n    replicationState.events.canceled.complete();\n}\n"],"mappings":"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"}